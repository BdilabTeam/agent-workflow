{
    "data": {
        "nodes": [
            {
                "id": "StartID",
                "type": "genericNode",
                "position": {
                    "x": 1,
                    "y": 1
                },
                "data": {
                    "type": "Start",
                    "node": {
                        "template": {
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import time\nimport json\n\nfrom typing import List, Dict, Union\n\nfrom langflow import CustomComponent\n# from .schemas import StartNode, StartNodeResponse, NodeData, TokenAndCost\n# from .utils import format_input_schemas_to_dict, NodeType\nfrom langflow.components.custom_components.schemas import StartNode, StartNodeResponse, NodeData, TokenAndCost\nfrom langflow.components.custom_components.utils import (\n    format_input_schemas_to_dict, \n    NodeType,\n    compute_tokens_by_transformers,\n    format_tokens\n)\n\nclass Start(CustomComponent):\n    id = \"1\"\n    display_name = \"开始\"\n    description = \"Start Node\"\n\n    def build_config(self):\n        return {\n            \"start_node_schema\": {\n                \"display_name\": \"输入节点schema\",\n                \"required\": False,\n                \"field_type\": \"dict\"\n            }\n        }\n\n    def build(\n        self,\n        start_node_schema: StartNode = {\"node_id\": \"1\"}\n    ) -> Union[dict, Dict]:\n        \n        start_time = time.time()\n        \n        node_id = start_node_schema.get(\"node_id\")\n        node_name = \"\"\n        parsed_input_json = \"\"\n        parsed_output_json = \"\"\n        raw_output = \"\"\n        error_info = \"\"\n        node_exe_cost = \"0s\"\n        extra = \"\"\n        \n        try:\n            start_node_schema = StartNode(**start_node_schema)  # 校验node schema，因为使用过dict接收schema，无法经过pydantic自动参数校验\n\n            # 解析输入schema\n            parsed_input_dict = format_input_schemas_to_dict(\n                input_schema=start_node_schema.input_schema,\n            )\n            parsed_input_json = json.dumps(parsed_input_dict)\n            # Start节点\n            parsed_output_json = parsed_input_json\n            node_status = \"SUCCESS\"\n            error_info = \"\"\n        except Exception as e:\n            node_status = \"FAILED\"\n            error_info = str(e)\n            \n        end_time = time.time()\n        # 计算节点运行时间\n        node_exe_cost = f\"{round((end_time - start_time), 4)}s\" \n        \n        input_tokens = compute_tokens_by_transformers(text=parsed_input_json)\n        output_tokens = input_tokens\n        total_tokens = input_tokens + output_tokens\n        token_and_cost = TokenAndCost(\n            input_tokens=format_tokens(input_tokens),\n            output_tokens=format_tokens(output_tokens),\n            total_tokens=format_tokens(total_tokens)\n        )\n        \n        start_node_data = NodeData(\n            node_id=node_id,\n            node_type=NodeType.START.value,\n            node_name=node_name,\n            node_status=node_status,\n            error_info=error_info,\n            input=parsed_input_json,\n            output=parsed_output_json,\n            node_exe_cost=node_exe_cost,\n            raw_output=raw_output,\n            extra=extra,\n            token_and_cost=token_and_cost\n        )\n        \n        start_node_response = StartNodeResponse(node_data=start_node_data)\n        return start_node_response.model_dump()",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "dynamic": true,
                                "info": "",
                                "title_case": true
                            },
                            "start_node_schema": {
                                "type": "dict",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "value": {
                                    "flow_id": "0366bbcd-9ec3-4a67-bb67-7d7324ecfc2d",
                                    "node_id": "StartID",
                                    "input_schema": {
                                        "inputParameters": [
                                            {
                                                "name": "user_input",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "literal",
                                                        "content": "start_content"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "start_node_schema",
                                "display_name": "输入节点schema",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "_type": "CustomComponent"
                        },
                        "description": "Start Node",
                        "base_classes": [
                            "dict",
                            "Dict"
                        ],
                        "display_name": "开始",
                        "documentation": "",
                        "custom_fields": {
                            "start_node_schema": null
                        },
                        "output_types": [
                            "dict",
                            "Dict"
                        ],
                        "field_formatters": {},
                        "beta": true
                    },
                    "id": "StartID"
                },
                "selected": false,
                "width": 1,
                "height": 1
            },
            {
                "id": "KnowledgeID",
                "type": "genericNode",
                "position": {
                    "x": 1,
                    "y": 1
                },
                "data": {
                    "type": "Knowledge",
                    "node": {
                        "template": {
                            "prenode_inputs": {
                                "type": "Dict",
                                "required": true,
                                "placeholder": "",
                                "list": true,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "prenode_inputs",
                                "display_name": "前置节点输入",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import time\nimport json\n\nfrom typing import List, Dict, Union\n\nfrom langflow import CustomComponent\n# from .schemas import KnowledgeNode, KnowledgeNodeResponse, NodeData, TokenAndCost\n# from .utils import (\n#     format_prenodes_data, format_input_schemas_to_dict,\n#     NodeType\n# )\n\nfrom langflow.components.custom_components.schemas import KnowledgeNode, KnowledgeNodeResponse, NodeData, TokenAndCost\nfrom langflow.components.custom_components.utils import (\n    format_prenodes_data, format_input_schemas_to_dict,\n    NodeType,\n    compute_tokens_by_transformers,\n    format_tokens\n)\n\nclass Knowledge(CustomComponent):\n    id = \"4\"\n    display_name = \"知识\"\n    description = \"Knowledge Node\"\n    \n    def build_config(self):\n        return {\n            \"prenode_inputs\": {\n                \"display_name\": \"前置节点输入\",\n            },\n            \n            \"knowledge_node_schema\": {\n                \"display_name\": \"知识节点schema\",\n                \"required\": False,\n                \"field_type\": \"dict\"\n            }\n        }\n\n    def build(\n        self, \n        prenode_inputs: List[Dict],\n        knowledge_node_schema: KnowledgeNode = {\"node_id\": \"4\"}\n    ) -> Union[dict, Dict]:\n        start_time = time.time()\n        \n        node_id = knowledge_node_schema.get(\"node_id\")\n        node_name = \"\"\n        parsed_input_json = \"\"\n        parsed_output_json = \"\"\n        raw_output = \"\"\n        error_info = \"\"\n        node_exe_cost = \"0s\"\n        extra = \"\"\n        node_status = \"RUNNING\"\n        \n        try:\n            knowledge_node_schema = KnowledgeNode(**knowledge_node_schema)  # 校验node schema，因为使用dict接收schema，无法经过pydantic自动参数校验\n            # 格式化前置节点输入数据\n            all_nodes_data = format_prenodes_data(prenode_inputs=prenode_inputs)\n            # 解析输入schema\n            parsed_input_dict = format_input_schemas_to_dict(\n                input_schema=knowledge_node_schema.input_schema,\n                prenode_results=all_nodes_data\n            )\n            parsed_input_json = json.dumps(parsed_input_dict)\n            \n            # TODO 实际业务逻辑\n            raw_output = \"raw output\"\n            # TODO 处理节点输出\n            parsed_output = {\n                \"key1\": raw_output,\n                \"key2\": raw_output\n            }\n            parsed_output_json = json.dumps(parsed_output)\n            node_status = \"SUCCESS\"\n        except Exception as e:\n            node_status = \"FAILED\"\n            error_info = str(e)\n        \n        end_time = time.time()\n        # 计算节点运行时间\n        node_exe_cost = f\"{round((end_time - start_time), 4)}s\" \n            \n        input_tokens = compute_tokens_by_transformers(text=parsed_input_json)\n        output_tokens = compute_tokens_by_transformers(text=parsed_output_json)\n        total_tokens = input_tokens + output_tokens\n        token_and_cost = TokenAndCost(\n            input_tokens=format_tokens(input_tokens),\n            output_tokens=format_tokens(output_tokens),\n            total_tokens=format_tokens(total_tokens)\n        )\n        \n        knowledge_node_data = NodeData(\n            node_id=node_id,\n            node_type=NodeType.KNOWLEDGE.value,\n            node_name=node_name,\n            node_status=node_status,\n            error_info=error_info,\n            input=parsed_input_json,\n            output=parsed_output_json,\n            node_exe_cost=node_exe_cost,\n            raw_output=raw_output,\n            extra=extra,\n            token_and_cost=token_and_cost\n        )\n        \n        knowledge_node_response = KnowledgeNodeResponse(node_data=knowledge_node_data)\n        \n        next_response = {\"prenode_inputs\": prenode_inputs}\n        next_response.update(knowledge_node_response.model_dump())\n        return next_response",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "dynamic": true,
                                "info": "",
                                "title_case": true
                            },
                            "knowledge_node_schema": {
                                "type": "dict",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "value": {
                                    "tenant_id": 1,
                                    "flow_id": "0366bbcd-9ec3-4a67-bb67-7d7324ecfc2d",
                                    "node_id": "KnowledgeID",
                                    "knowledge_ids": ["1"],
                                    "knowledge_schema": {
                                        "knowledge_name": "安全事件研判规则",
                                        "knowledge_config": {
                                            "search_strategy": "semantic",
                                            "maximum_number_of_recalls": "5",
                                            "minimum_matching_degree": "0.5"
                                        }
                                    },
                                    "input_schema": {
                                        "inputParameters": [
                                            {
                                                "name": "user_input",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "literal",
                                                        "content": "事件研判规则有哪些？"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "knowledge_node_schema",
                                "display_name": "知识节点schema",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "_type": "CustomComponent"
                        },
                        "description": "Knowledge Node",
                        "base_classes": [
                            "dict",
                            "Dict"
                        ],
                        "display_name": "知识",
                        "documentation": "",
                        "custom_fields": {
                            "prenode_inputs": null,
                            "knowledge_node_schema": null
                        },
                        "output_types": [
                            "dict",
                            "Dict"
                        ],
                        "field_formatters": {},
                        "beta": true
                    },
                    "id": "KnowledgeID"
                },
                "selected": false,
                "width": 1,
                "height": 1,
                "positionAbsolute": {
                    "x": 1,
                    "y": 1
                },
                "dragging": false
            },
            {
                "id": "ToolID",
                "type": "genericNode",
                "position": {
                    "x": 1,
                    "y": 1
                },
                "data": {
                    "type": "Tool",
                    "node": {
                        "template": {
                            "prenode_inputs": {
                                "type": "Dict",
                                "required": true,
                                "placeholder": "",
                                "list": true,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "prenode_inputs",
                                "display_name": "前置节点输入",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import time\nimport json\nimport concurrent\nimport concurrent.futures\nfrom typing import List, Dict, Union\n\nfrom langflow import CustomComponent\n\n# from .schemas import ToolNode, ToolNodeResponse, NodeData, TokenAndCost\n# from .utils import (\n#     format_prenodes_data, \n#     format_input_schemas_to_dict, \n#     NodeType\n# )\n# from .rest import RESTClientObject, Configuration, RESTResponse\n\nfrom langflow.components.custom_components.schemas import ToolNode, ToolNodeResponse, NodeData, TokenAndCost\nfrom langflow.components.custom_components.utils import (\n    format_prenodes_data, \n    format_input_schemas_to_dict, \n    NodeType,\n    compute_tokens_by_transformers,\n    format_tokens\n)\nfrom langflow.components.custom_components.rest import RESTClientObject, Configuration, RESTResponse\n\nclass Tool(CustomComponent):\n    id = \"5\"\n    display_name = \"工具\"\n    description = \"Tool Node\"\n\n    def build_config(self):\n        return {\n            \"prenode_inputs\": {\n                \"display_name\": \"前置节点输入\",\n            },\n            \n            \"tool_node_schema\": {\n                \"display_name\": \"工具节点schema\",\n                \"required\": False,\n                \"field_type\": \"dict\"\n            }\n        }\n\n    def build(\n        self, \n        prenode_inputs: List[Dict],\n        tool_node_schema: ToolNode = {\"node_id\": \"5\"}\n    ) -> Union[dict, Dict]:\n        \n        start_time = time.time()\n        node_id = tool_node_schema.get(\"node_id\")\n        node_name = \"\"\n        parsed_input_json = \"\"\n        parsed_output_json = \"\"\n        raw_output = \"\"\n        error_info = \"\"\n        node_exe_cost = \"0s\"\n        extra = \"\"\n        node_status = \"RUNNING\"\n        \n        try:\n            tool_node_schema = ToolNode(**tool_node_schema) # 校验node schema，因为使用dict接收schema，无法经过pydantic自动参数校验\n            \n            # 格式化前置节点输入数据\n            all_nodes_data = format_prenodes_data(prenode_inputs=prenode_inputs)\n            # 解析输入schema\n            parsed_input_dict = format_input_schemas_to_dict(\n                input_schema=tool_node_schema.input_schema,\n                prenode_results=all_nodes_data\n            )\n            parsed_input_json = json.dumps(parsed_input_dict)\n            \n            TOOL_CALL_URL_FORMAT = \"{0}://{1}/admin-api/plugins/tool/external/call/test\"\n            protocol = \"http\"\n            host = \"172.22.102.61:48080\"\n            \n            if not (tool_ids := tool_node_schema.tool_ids):\n                raise ValueError(\"工具ID不能为空\")\n            \n            if not (tenant_id := tool_node_schema.tenant_id):\n                raise ValueError(\"租户ID不能为空\")\n            \n            # 外网接口测试\n            # configuration = Configuration()\n            # rest_client = RESTClientObject(configuration=configuration)\n            \n            # tool_call_results = []\n\n            # for tool_id in tool_ids:\n            #     tool_call_url = TOOL_CALL_URL_FORMAT.format(\n            #         protocol, host\n            #     )\n            #     tool_call_url = \"http://60.204.186.96:31185/api/v1/experiment/cards\"\n            #     with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n            #         future = executor.submit(rest_client.GET, url=tool_call_url)\n            #         tool_call_response: RESTResponse = future.result()\n            #         if tool_call_response.status >= 200 and tool_call_response.status < 300:\n            #             tool_call_results.append({tool_id: tool_call_response.data.decode('utf-8')})\n            #         else:\n            #              tool_call_results.append({tool_id: tool_call_response.reason})\n            \n            # mock_data = {\n            #     \"data\": {\n            #         \"url\": tool_call_url,\n            #         \"headers\": headers,\n            #         \"body\": body\n            #     }\n            # }\n  \n            # tool_call_results.append({tool_id: mock_data})\n            \n            headers = {\"tenant-id\": tenant_id}\n            body = {\n                \"requestBody\": parsed_input_json\n            }\n            \n            configuration = Configuration()\n            rest_client = RESTClientObject(configuration=configuration)\n            \n            tool_call_results = []\n\n            for tool_id in tool_ids:\n                tool_call_url = TOOL_CALL_URL_FORMAT.format(\n                    protocol, host\n                )\n                body.update({\"toolId\": tool_id})\n                with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n                    future = executor.submit(rest_client.POST, url=tool_call_url, body=body, headers=headers)\n                    tool_call_response: RESTResponse = future.result()\n                    if tool_call_response.status >= 200 and tool_call_response.status < 300:\n                        tool_call_results.append({tool_id: tool_call_response.data.decode('utf-8')})\n                    else:\n                         tool_call_results.append({tool_id: tool_call_response.reason})\n                    future.add_done_callback(lambda future: print(f\"Successfully call {tool_call_url}\"))\n                \n            \n            # TODO 工具节点一次只调用一个工具\n            raw_output = tool_call_results[0].get(tool_ids[0], \"\")\n            \n            parsed_output_json = raw_output\n            node_status = \"SUCCESS\"\n        except Exception as e:\n            node_status = \"FAILED\"\n            error_info = str(e)\n        \n        end_time = time.time()\n        # 计算节点运行时间\n        node_exe_cost = f\"{round((end_time - start_time), 4)}s\" \n        \n        input_tokens = compute_tokens_by_transformers(text=parsed_input_json)\n        output_tokens = compute_tokens_by_transformers(text=parsed_output_json)\n        total_tokens = input_tokens + output_tokens\n        token_and_cost = TokenAndCost(\n            input_tokens=format_tokens(input_tokens),\n            output_tokens=format_tokens(output_tokens),\n            total_tokens=format_tokens(total_tokens)\n        )\n        \n        tool_node_data = NodeData(\n            node_id=node_id,\n            node_type=NodeType.TOOL.value,\n            node_name=node_name,\n            node_status=node_status,\n            error_info=error_info,\n            input=parsed_input_json,\n            output=parsed_output_json,\n            node_exe_cost=node_exe_cost,\n            raw_output=raw_output,\n            extra=extra,\n            token_and_cost=token_and_cost\n        )\n        \n        tool_node_response = ToolNodeResponse(node_data=tool_node_data)\n        \n        next_response = {\"prenode_inputs\": prenode_inputs}\n        next_response.update(tool_node_response.model_dump())\n        return next_response\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "dynamic": true,
                                "info": "",
                                "title_case": true
                            },
                            "tool_node_schema": {
                                "type": "dict",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "value": {
                                    "tenant_id": 1,
                                    "flow_id": "0366bbcd-9ec3-4a67-bb67-7d7324ecfc2d",
                                    "node_id": "ToolID",
                                    "tool_ids": ["1"],
                                    "input_schema": {
                                        "inputParameters": [
                                            {
                                                "name": "user_input",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "literal",
                                                        "content": "工具参数值"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "tool_node_schema",
                                "display_name": "工具节点schema",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "_type": "CustomComponent"
                        },
                        "description": "Tool Node",
                        "base_classes": [
                            "dict",
                            "Dict"
                        ],
                        "display_name": "工具",
                        "documentation": "",
                        "custom_fields": {
                            "prenode_inputs": null,
                            "tool_node_schema": null
                        },
                        "output_types": [
                            "dict",
                            "Dict"
                        ],
                        "field_formatters": {},
                        "beta": true
                    },
                    "id": "ToolID"
                },
                "selected": false,
                "width": 1,
                "height": 1,
                "positionAbsolute": {
                    "x": 1,
                    "y": 1
                },
                "dragging": false
            },
            {
                "id": "LLMID",
                "type": "genericNode",
                "position": {
                    "x": 1,
                    "y": 1
                },
                "data": {
                    "type": "LLM",
                    "node": {
                        "template": {
                            "prenode_inputs": {
                                "type": "Dict",
                                "required": true,
                                "placeholder": "",
                                "list": true,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "prenode_inputs",
                                "display_name": "前置节点输入",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import time\nimport json\nfrom typing import List, Dict, Union\n\nfrom langflow import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_openai import ChatOpenAI\n\n# from .schemas import LLMNode, LLMNodeResponse, NodeData, TokenAndCost\n# from .utils import (\n#     format_prenodes_data, \n#     format_input_schemas_to_dict,\n#     format_output_schemas_to_dict,\n#     safe_format_prompt,\n#     NodeType\n# )\n\nfrom langflow.components.custom_components.schemas import LLMNode, LLMNodeResponse, NodeData, TokenAndCost\nfrom langflow.components.custom_components.utils import (\n    format_prenodes_data, \n    format_input_schemas_to_dict,\n    format_output_schemas_to_dict,\n    safe_format_prompt,\n    NodeType,\n    compute_tokens_by_transformers,\n    format_tokens\n)\n\nclass LLM(CustomComponent):\n    id = \"3\"\n    display_name = \"LLM\"\n    description = \"LLM Node\"\n\n    def build_config(self):\n        return {\n            \"prenode_inputs\": {\n                \"display_name\": \"前置节点输入\",\n            },\n            \"llm_node_schema\": {\n                \"display_name\": \"LLM节点shchema\",\n                \"advanced\": False,\n                \"required\": False,\n                \"field_type\": \"dict\"\n            },\n        }\n\n    def build(\n        self,\n        prenode_inputs: List[Dict],\n        llm_node_schema: LLMNode = {\"node_id\": \"3\"}\n    ) -> Union[dict, Dict]:\n        \n        start_time = time.time()\n        \n        node_id = llm_node_schema.get(\"node_id\")\n        node_name = \"\"\n        parsed_input_json = \"\"\n        parsed_output_json = \"\"\n        raw_output = \"\"\n        error_info = \"\"\n        node_exe_cost = \"0s\"\n        extra = \"\"\n        node_status = \"RUNNING\"\n        \n        try:\n            llm_node_schema = LLMNode(**llm_node_schema) # 校验node schema，因为使用dict接收schema，无法经过pydantic自动参数校验\n            \n            # 格式化前置节点输入数据\n            all_nodes_data = format_prenodes_data(prenode_inputs=prenode_inputs)\n            # 解析输入schema\n            parsed_input_dict = format_input_schemas_to_dict(\n                input_schema=llm_node_schema.input_schema,\n                prenode_results=all_nodes_data\n            )\n            parsed_input_json = json.dumps(parsed_input_dict)\n            \n            if not (prompt_template := llm_node_schema.prompt):\n                raise ValueError(\"大模型提示词'prompt'不能为空.\")\n            \n            # 参数填充提示词模版\n            formatted_prompt = safe_format_prompt(template=prompt_template, params_dict=parsed_input_dict)\n            \n            prompt_template = ChatPromptTemplate.from_messages([(\"user\", formatted_prompt)])\n            model = ChatOpenAI(\n                model=llm_node_schema.model_schema.model_name.lower(),\n                temperature=llm_node_schema.model_schema.model_parameters.temperature,\n                base_url=llm_node_schema.model_schema.model_parameters.openai_base_url,\n                api_key=llm_node_schema.model_schema.model_parameters.openai_api_key,\n            )\n            # 外网测试\n            # model = ChatOpenAI(\n            #     base_url=\"https://api.chatanywhere.com.cn\",\n            #     api_key=\"sk-Ms5F2wAkilaaZYo0HpumWR7qBLkOIsXflNQeAHSrNtmUYjzk\",\n            # )\n            chain = prompt_template | model\n            \n            raw_output = chain.invoke({}).content\n            \n            # TODO 是否需要输出解析器来解析大模型输出为用户指定数据类型？\n            parsed_output_dict = format_output_schemas_to_dict(output_schema=llm_node_schema.output_schema, raw_output=raw_output)\n            parsed_output_json = json.dumps(parsed_output_dict)\n            \n            node_status = \"SUCCESS\"\n        except Exception as e:\n            node_status = \"FAILED\"\n            error_info = str(e)\n        \n        end_time = time.time()\n        # 计算节点运行时间\n        node_exe_cost = f\"{round((end_time - start_time), 4)}s\" \n        \n        input_tokens = compute_tokens_by_transformers(text=parsed_input_json)\n        output_tokens = compute_tokens_by_transformers(text=parsed_output_json)\n        total_tokens = input_tokens + output_tokens\n        token_and_cost = TokenAndCost(\n            input_tokens=format_tokens(input_tokens),\n            output_tokens=format_tokens(output_tokens),\n            total_tokens=format_tokens(total_tokens)\n        )\n        \n        llm_node_data = NodeData(\n            node_id=node_id,\n            node_type=NodeType.LLM.value,\n            node_name=node_name,\n            node_status=node_status,\n            error_info=error_info,\n            input=parsed_input_json,\n            output=parsed_output_json,\n            node_exe_cost=node_exe_cost,\n            raw_output=raw_output,\n            extra=extra,\n            token_and_cost=token_and_cost\n        )\n        \n        llm_node_response = LLMNodeResponse(node_data=llm_node_data)\n        \n        next_response = {\"prenode_inputs\": prenode_inputs}\n        next_response.update(llm_node_response.model_dump())\n        \n        return next_response",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "dynamic": true,
                                "info": "",
                                "title_case": true
                            },
                            "llm_node_schema": {
                                "type": "dict",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "value": {
                                    "flow_id": "0366bbcd-9ec3-4a67-bb67-7d7324ecfc2d",
                                    "node_id": "LLMID",
                                    "prompt": "分析安全事件{security_event}",
                                    "model_schema": {
                                        "model_name": "qwen1.5-14b-chat",
                                        "model_parameters": {
                                            "temperature": 0.5,
                                            "openai_api_key": "",
                                            "openai_base_url": ""
                                        },
                                        "model_quota": {
                                            "token_limit": 4096,
                                            "token_resp": 4000,
                                            "system_prompt_limit": 3700
                                        }
                                    },
                                    "input_schema": {
                                        "inputParameters": [
                                            {
                                                "name": "security_event",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "literal",
                                                        "content": "111.111.111.111sql注入"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "output_schema": {
                                        "outputs": [
                                            {
                                                "name": "output_name",
                                                "type": "string",
                                                "schema": null
                                            }
                                        ]
                                    }
                                },
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "llm_node_schema",
                                "display_name": "LLM节点shchema",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "_type": "CustomComponent"
                        },
                        "description": "LLM Node",
                        "base_classes": [
                            "dict",
                            "Dict"
                        ],
                        "display_name": "LLM",
                        "documentation": "",
                        "custom_fields": {
                            "prenode_inputs": null,
                            "llm_node_schema": null
                        },
                        "output_types": [
                            "dict",
                            "Dict"
                        ],
                        "field_formatters": {},
                        "beta": true
                    },
                    "id": "LLMID"
                },
                "selected": false,
                "width": 1,
                "height": 1,
                "positionAbsolute": {
                    "x": 1,
                    "y": 1
                },
                "dragging": false
            },
            {
                "id": "EndID",
                "type": "genericNode",
                "position": {
                    "x": 1,
                    "y": 1
                },
                "data": {
                    "type": "End",
                    "node": {
                        "template": {
                            "prenode_inputs": {
                                "type": "Dict",
                                "required": true,
                                "placeholder": "",
                                "list": true,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "prenode_inputs",
                                "display_name": "前置节点原始输入",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import time\nimport json\n\nfrom typing import List, Dict\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import Data\n\n# from .schemas import EndNode, EndNodeResponse, NodeData, TokenAndCost\n# from .utils import (\n#     format_prenodes_data, \n#     format_input_schemas_to_dict,\n#     NodeType,\n#     compute_tokens_by_transformers,\n#     format_tokens\n# )\n\nfrom langflow.components.custom_components.schemas import EndNode, EndNodeResponse, NodeData, TokenAndCost\nfrom langflow.components.custom_components.utils import (\n    format_prenodes_data, \n    format_input_schemas_to_dict,\n    NodeType,\n    compute_tokens_by_transformers,\n    format_tokens\n)\n\nclass End(CustomComponent):\n    id = \"2\"\n    display_name = \"结束\"\n    description = \"End Node\"\n\n    def build_config(self):\n        return {\n            \"prenode_inputs\": {\n                \"display_name\": \"前置节点原始输入\",\n            },\n            \"end_node_schema\": {\n                \"display_name\": \"结束节点schema\",\n                \"required\": False,\n                \"field_type\": \"dict\"\n            }\n        }\n\n    def build(\n        self, \n        prenode_inputs: List[Dict],\n        end_node_schema: EndNode = {\"node_id\": \"2\"}\n    ) -> Data:\n        start_time = time.time()\n        \n        node_id = end_node_schema.get(\"node_id\")\n        node_name = \"\"\n        parsed_input_json = \"\"\n        parsed_output_json = \"\"\n        raw_output = \"\"\n        error_info = \"\"\n        node_exe_cost = \"0s\"\n        extra = \"\"\n        node_status = \"RUNNING\"\n        all_nodes_data = []\n        \n        try:\n            end_node_schema = EndNode(**end_node_schema)    # 校验node schema，因为使用dict接收schema，无法经过pydantic自动参数校验\n             # 格式化前置节点输入数据\n            all_nodes_data = format_prenodes_data(prenode_inputs=prenode_inputs)\n            # 解析输入schema\n            parsed_input_dict = format_input_schemas_to_dict(\n                input_schema=end_node_schema.input_schema,\n                prenode_results=all_nodes_data\n            )\n            parsed_input_json = json.dumps(parsed_input_dict)\n            # End节点解析完称的输入等价于输出\n            parsed_output_json = parsed_input_json\n            \n            # 模拟异常\n            # raise ValueError(\"End节点发生异常\")\n            node_status = \"SUCCESS\"\n        except Exception as e:\n            node_status = \"FAILED\"\n            error_info = str(e)\n\n        end_time = time.time()\n        node_exe_cost = f\"{round((end_time - start_time), 4)}s\"\n        \n        input_tokens = compute_tokens_by_transformers(text=parsed_input_json)\n        output_tokens = compute_tokens_by_transformers(text=parsed_output_json)\n        total_tokens = input_tokens + output_tokens\n        token_and_cost = TokenAndCost(\n            input_tokens=format_tokens(input_tokens),\n            output_tokens=format_tokens(output_tokens),\n            total_tokens=format_tokens(total_tokens)\n        )\n        \n        end_node_data = NodeData(\n            node_id=node_id,\n            node_type=NodeType.END.value,\n            node_name=node_name,\n            node_status=node_status,\n            error_info=error_info,\n            input=parsed_input_json,\n            output=parsed_output_json,\n            node_exe_cost=node_exe_cost,\n            raw_output=raw_output,\n            extra=extra,\n            token_and_cost=token_and_cost\n        )\n        \n        all_nodes_data.append(end_node_data)\n        return EndNodeResponse(\n            node_data=end_node_data,\n            all_nodes_data=all_nodes_data\n        ).model_dump()\n        ",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "dynamic": true,
                                "info": "",
                                "title_case": true
                            },
                            "end_node_schema": {
                                "type": "dict",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "value": {
                                    "flow_id": "0366bbcd-9ec3-4a67-bb67-7d7324ecfc2d",
                                    "node_id": "EndID",
                                    "prompt": "Here is the {{variable}}",
                                    "input_schema": {
                                        "inputParameters": [
                                            {
                                                "name": "ref_llm_output",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "ref",
                                                        "content": {
                                                            "source_id": "LLMID",
                                                            "name": "output_name"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "ref_tool_output",
                                                "input": {
                                                    "type": "string",
                                                    "schema": null,
                                                    "value": {
                                                        "type": "ref",
                                                        "content": {
                                                            "source_id": "ToolID",
                                                            "name": "data"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "output_schema": {
                                        "outputs": [
                                            {
                                                "name": "output_name",
                                                "type": "string",
                                                "schema": null
                                            }
                                        ]
                                    }
                                },
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "end_node_schema",
                                "display_name": "结束节点schema",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": true
                            },
                            "_type": "CustomComponent"
                        },
                        "description": "End Node",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "结束",
                        "documentation": "",
                        "custom_fields": {
                            "prenode_inputs": null,
                            "end_node_schema": null
                        },
                        "output_types": [
                            "Data"
                        ],
                        "field_formatters": {},
                        "beta": true
                    },
                    "id": "EndID"
                },
                "selected": true,
                "width": 1,
                "height": 1,
                "positionAbsolute": {
                    "x": 1,
                    "y": 1
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "source": "StartID",
                "sourceHandle": "",
                "target": "ToolID",
                "targetHandle": "",
                "data": {
                    "targetHandle": {
                        "fieldName": "prenode_inputs",
                        "id": "",
                        "inputTypes": null,
                        "type": ""
                    },
                    "sourceHandle": {
                        "baseClasses": [
                            "",
                            ""
                        ],
                        "dataType": "",
                        "id": ""
                    }
                },
                "style": {
                    "stroke": ""
                },
                "className": "",
                "animated": false,
                "id": ""
            },
            {
                "source": "StartID",
                "sourceHandle": "",
                "target": "KnowledgeID",
                "targetHandle": "",
                "data": {
                    "targetHandle": {
                        "fieldName": "prenode_inputs",
                        "id": "",
                        "inputTypes": null,
                        "type": ""
                    },
                    "sourceHandle": {
                        "baseClasses": [
                            "",
                            ""
                        ],
                        "dataType": "",
                        "id": ""
                    }
                },
                "style": {
                    "stroke": ""
                },
                "className": "",
                "animated": false,
                "id": ""
            },
            {
                "source": "ToolID",
                "sourceHandle": "",
                "target": "LLMID",
                "targetHandle": "",
                "data": {
                    "targetHandle": {
                        "fieldName": "prenode_inputs",
                        "id": "",
                        "inputTypes": null,
                        "type": ""
                    },
                    "sourceHandle": {
                        "baseClasses": [
                            "",
                            ""
                        ],
                        "dataType": "",
                        "id": ""
                    }
                },
                "style": {
                    "stroke": ""
                },
                "className": "",
                "animated": false,
                "id": ""
            },
            {
                "source": "KnowledgeID",
                "sourceHandle": "",
                "target": "LLMID",
                "targetHandle": "",
                "data": {
                    "targetHandle": {
                        "fieldName": "prenode_inputs",
                        "id": "",
                        "inputTypes": null,
                        "type": ""
                    },
                    "sourceHandle": {
                        "baseClasses": [
                            "",
                            ""
                        ],
                        "dataType": "",
                        "id": ""
                    }
                },
                "style": {
                    "stroke": ""
                },
                "className": "",
                "animated": false,
                "id": ""
            },
            {
                "source": "LLMID",
                "sourceHandle": "",
                "target": "EndID",
                "targetHandle": "",
                "data": {
                    "targetHandle": {
                        "fieldName": "prenode_inputs",
                        "id": "",
                        "inputTypes": null,
                        "type": ""
                    },
                    "sourceHandle": {
                        "baseClasses": [
                            "",
                            ""
                        ],
                        "dataType": "",
                        "id": ""
                    }
                },
                "style": {
                    "stroke": ""
                },
                "className": "",
                "animated": false,
                "id": ""
            }
        ],
        "viewport": {
            "x": 1,
            "y": 1,
            "zoom": 1
        }
    },
    "inputs": {},
    "tweaks": {},
    "clear_cache": true,
    "session_id": "",
    "sync": false
}