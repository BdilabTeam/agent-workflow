{
  "url": "http://127.0.0.1:7860/api/v1/flows/?x-api-key=1",
  "Request Method": "GET",
  "requestParam": {},
  "requestPayload": {},
  "response": [
    {
      "name": "Untitled document",
      "description": "Crafting Dialogues that Drive Business Success.",
      "data": {
        "nodes": [
          {
            "id": "Data-MwtGd",
            "type": "genericNode",
            "position": {
              "x": -540.0039592337016,
              "y": 657.9229727540634
            },
            "data": {
              "type": "Data",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict,Text\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            }\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "max_tokens": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 256,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_tokens",
                    "display_name": "Max Tokens",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "gpt-3.5-turbo-0125",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "gpt-4-turbo-preview",
                      "gpt-4-0125-preview",
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-3.5-turbo-0125",
                      "gpt-3.5-turbo-1106"
                    ],
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                    "title_case": true,
                    "value": "https://api.chatanywhere.com.cn"
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true,
                    "value": "sk-Ms5F2wAkilaaZYo0HpumWR7qBLkOIsXflNQeAHSrNtmUYjzk"
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "0.2",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "`OpenAI` Chat large language models API.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "display_name": "ChatOpenAI",
                "documentation": "",
                "custom_fields": {
                  "max_tokens": null,
                  "model_kwargs": null,
                  "model_name": null,
                  "openai_api_base": null,
                  "openai_api_key": null,
                  "temperature": null
                },
                "output_types": [
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "Data-MwtGd",
              "description": "`OpenAI` Chat large language models API.",
              "display_name": "ChatOpenAI"
            },
            "selected": false,
            "width": 384,
            "height": 730,
            "positionAbsolute": {
              "x": -540.0039592337016,
              "y": 657.9229727540634
            },
            "dragging": false
          },
          {
            "id": "LLMChain-PqBti",
            "type": "genericNode",
            "position": {
              "x": -57.560755024775176,
              "y": 787.4070051302095
            },
            "data": {
              "type": "LLMChain",
              "node": {
                "template": {
                  "llm": {
                    "type": "BaseLanguageModel",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "memory": {
                    "type": "BaseMemory",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "memory",
                    "display_name": "Memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "prompt": {
                    "type": "BasePromptTemplate",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "prompt",
                    "display_name": "Prompt",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Chain to run queries against LLMs",
                "base_classes": [
                  "Chain",
                  "Callable",
                  "LLMChain",
                  "Chain"
                ],
                "display_name": "LLMChain",
                "documentation": "",
                "custom_fields": {
                  "prompt": null,
                  "llm": null,
                  "memory": null
                },
                "output_types": [
                  "Chain",
                  "Callable",
                  "LLMChain"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "LLMChain-PqBti"
            },
            "selected": false,
            "width": 384,
            "height": 425,
            "positionAbsolute": {
              "x": -57.560755024775176,
              "y": 787.4070051302095
            },
            "dragging": false
          },
          {
            "id": "PromptTemplate-epqSA",
            "type": "genericNode",
            "position": {
              "x": -1136.727965051119,
              "y": 741.8122126461245
            },
            "data": {
              "type": "PromptTemplate",
              "node": {
                "template": {
                  "output_parser": {
                    "type": "BaseOutputParser",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "output_parser",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_types": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_types",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_variables": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": [
                      "input",
                      "it"
                    ]
                  },
                  "metadata": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "metadata",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "name",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "partial_variables": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "partial_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "tags": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "tags",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "template": {
                    "type": "prompt",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "fileTypes": [],
                    "password": false,
                    "name": "template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": "What is {input} in {it}"
                  },
                  "template_format": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": "f-string",
                    "fileTypes": [],
                    "password": false,
                    "name": "template_format",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "validate_template": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "validate_template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "PromptTemplate",
                  "input": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input",
                    "display_name": "input",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "it": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "it",
                    "display_name": "it",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  }
                },
                "description": "Prompt template for a language model.",
                "icon": null,
                "base_classes": [
                  "PromptTemplate",
                  "StringPromptTemplate",
                  "BasePromptTemplate"
                ],
                "name": "",
                "display_name": "PromptTemplate",
                "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                "custom_fields": {
                  "": [
                    "input",
                    "it"
                  ]
                },
                "output_types": [],
                "full_path": null,
                "field_formatters": {},
                "beta": false,
                "error": null
              },
              "id": "PromptTemplate-epqSA",
              "description": "Prompt template for a language model.",
              "display_name": "PromptTemplate"
            },
            "selected": true,
            "width": 384,
            "height": 468,
            "positionAbsolute": {
              "x": -1136.727965051119,
              "y": 741.8122126461245
            },
            "dragging": true
          }
        ],
        "edges": [
          {
            "source": "Data-MwtGd",
            "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œDataœ,œidœ:œData-MwtGdœ}",
            "target": "LLMChain-PqBti",
            "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-PqBtiœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
            "data": {
              "targetHandle": {
                "fieldName": "llm",
                "id": "LLMChain-PqBti",
                "inputTypes": null,
                "type": "BaseLanguageModel"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseLanguageModel",
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "dataType": "Data",
                "id": "Data-MwtGd"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-foreground  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-Data-MwtGd{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œDataœ,œidœ:œData-MwtGdœ}-LLMChain-PqBti{œfieldNameœ:œllmœ,œidœ:œLLMChain-PqBtiœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
          },
          {
            "source": "PromptTemplate-epqSA",
            "sourceHandle": "{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-epqSAœ}",
            "target": "LLMChain-PqBti",
            "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-PqBtiœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
            "data": {
              "targetHandle": {
                "fieldName": "prompt",
                "id": "LLMChain-PqBti",
                "inputTypes": null,
                "type": "BasePromptTemplate"
              },
              "sourceHandle": {
                "baseClasses": [
                  "PromptTemplate",
                  "StringPromptTemplate",
                  "BasePromptTemplate"
                ],
                "dataType": "PromptTemplate",
                "id": "PromptTemplate-epqSA"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-foreground  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PromptTemplate-epqSA{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-epqSAœ}-LLMChain-PqBti{œfieldNameœ:œpromptœ,œidœ:œLLMChain-PqBtiœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
          }
        ],
        "viewport": {
          "x": 1057.3435083978588,
          "y": -528.1007317353569,
          "zoom": 0.8705505841225069
        }
      },
      "is_component": false,
      "updated_at": "2024-05-08T04:05:20.976273",
      "folder": null,
      "id": "99ffc680-888f-4b2c-aea3-731670ed2b52",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "PDF QA",
      "description": "Unleashing Business Potential through Language Engineering.",
      "data": {
        "nodes": [
          {
            "id": "PyPDFLoader-Qavc0",
            "type": "genericNode",
            "position": {
              "x": -239.73360224381855,
              "y": 206.29048770261159
            },
            "data": {
              "type": "PyPDFLoader",
              "node": {
                "template": {
                  "file_path": {
                    "type": "file",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "同济大学RAG.pdf",
                    "fileTypes": [
                      ".pdf"
                    ],
                    "file_path": "C:\\Users\\25217\\AppData\\Local\\langflow\\langflow\\Cache\\b0c34de0-0ff0-4cd2-98c9-e391ac7e0c77\\4d093fbc4425a507b6dc335fea3eb537e36afc893623018e51199951abc43213.pdf",
                    "password": false,
                    "name": "file_path",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "metadata": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": [
                      {
                        "": ""
                      }
                    ],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "metadata",
                    "display_name": "Metadata",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "PyPDFLoader"
                },
                "description": "Load PDF using pypdf into list of documents.",
                "base_classes": [
                  "Document"
                ],
                "display_name": "PyPDFLoader",
                "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
                "custom_fields": {},
                "output_types": [
                  "Document"
                ],
                "field_formatters": {},
                "beta": false
              },
              "id": "PyPDFLoader-Qavc0"
            },
            "selected": false,
            "width": 384,
            "height": 367,
            "positionAbsolute": {
              "x": -239.73360224381855,
              "y": 206.29048770261159
            },
            "dragging": false
          },
          {
            "id": "CharacterTextSplitter-79uDG",
            "type": "genericNode",
            "position": {
              "x": 226.34901520043513,
              "y": 60.123228196070215
            },
            "data": {
              "type": "CharacterTextSplitter",
              "node": {
                "template": {
                  "documents": {
                    "type": "Document",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "documents",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "chunk_overlap": {
                    "type": "int",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 200,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chunk_overlap",
                    "display_name": "Chunk Overlap",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "chunk_size": {
                    "type": "int",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "500",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chunk_size",
                    "display_name": "Chunk Size",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "separator": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "\\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "separator",
                    "display_name": "Separator",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CharacterTextSplitter"
                },
                "description": "Splitting text that looks at characters.",
                "base_classes": [
                  "Document"
                ],
                "display_name": "CharacterTextSplitter",
                "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
                "custom_fields": {},
                "output_types": [
                  "Document"
                ],
                "field_formatters": {},
                "beta": false
              },
              "id": "CharacterTextSplitter-79uDG"
            },
            "selected": false,
            "width": 384,
            "height": 508,
            "positionAbsolute": {
              "x": 226.34901520043513,
              "y": 60.123228196070215
            },
            "dragging": false
          },
          {
            "id": "RetrievalQA-zFB82",
            "type": "genericNode",
            "position": {
              "x": 1920.072908759618,
              "y": -481.17541149910704
            },
            "data": {
              "type": "RetrievalQA",
              "node": {
                "template": {
                  "combine_documents_chain": {
                    "type": "BaseCombineDocumentsChain",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "combine_documents_chain",
                    "display_name": "Combine Documents Chain",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "memory": {
                    "type": "BaseMemory",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "memory",
                    "display_name": "Memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "retriever": {
                    "type": "BaseRetriever",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "retriever",
                    "display_name": "Retriever",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_key": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "query",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_key",
                    "display_name": "Input Key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "output_key": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "result",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "output_key",
                    "display_name": "Output Key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "return_source_documents": {
                    "type": "bool",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": true,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "return_source_documents",
                    "display_name": "Return Source Documents",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Chain for question-answering against an index.",
                "base_classes": [
                  "BaseRetrievalQA",
                  "Chain",
                  "Callable"
                ],
                "display_name": "RetrievalQA",
                "documentation": "",
                "custom_fields": {
                  "combine_documents_chain": null,
                  "retriever": null,
                  "memory": null,
                  "input_key": null,
                  "output_key": null,
                  "return_source_documents": null
                },
                "output_types": [
                  "BaseRetrievalQA",
                  "Callable"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "RetrievalQA-zFB82"
            },
            "selected": false,
            "width": 384,
            "height": 500,
            "positionAbsolute": {
              "x": 1920.072908759618,
              "y": -481.17541149910704
            },
            "dragging": false
          },
          {
            "id": "CombineDocsChain-w6jms",
            "type": "genericNode",
            "position": {
              "x": 1403.7189112273475,
              "y": -470.74401760956636
            },
            "data": {
              "type": "CombineDocsChain",
              "node": {
                "template": {
                  "llm": {
                    "type": "BaseLanguageModel",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "chain_type": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "stuff",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "stuff",
                      "map_reduce",
                      "map_rerank",
                      "refine"
                    ],
                    "name": "chain_type",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "load_qa_chain"
                },
                "description": "Load question answering chain.",
                "base_classes": [
                  "BaseCombineDocumentsChain",
                  "Callable"
                ],
                "display_name": "CombineDocsChain",
                "documentation": "",
                "custom_fields": {},
                "output_types": [],
                "field_formatters": {},
                "beta": false
              },
              "id": "CombineDocsChain-w6jms"
            },
            "selected": false,
            "width": 384,
            "height": 333,
            "positionAbsolute": {
              "x": 1403.7189112273475,
              "y": -470.74401760956636
            },
            "dragging": false
          },
          {
            "id": "FAISS-ccfSO",
            "type": "genericNode",
            "position": {
              "x": 1351.5117782170516,
              "y": 145.97210220118507
            },
            "data": {
              "type": "FAISS",
              "node": {
                "template": {
                  "documents": {
                    "type": "Document",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "documents",
                    "display_name": "Documents",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "embedding": {
                    "type": "Embeddings",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "embedding",
                    "display_name": "Embedding",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import List, Union\n\nfrom langchain.schema import BaseRetriever\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.faiss import FAISS\nfrom langflow import CustomComponent\nfrom langflow.field_typing import Document, Embeddings\n\n\nclass FAISSComponent(CustomComponent):\n    display_name = \"FAISS\"\n    description = \"Construct FAISS wrapper from raw documents.\"\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        documents: List[Document],\n    ) -> Union[VectorStore, FAISS, BaseRetriever]:\n        return FAISS.from_documents(documents=documents, embedding=embedding)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Construct FAISS wrapper from raw documents.",
                "base_classes": [
                  "VectorStore",
                  "FAISS",
                  "VectorStore",
                  "BaseRetriever"
                ],
                "display_name": "FAISS",
                "documentation": "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss",
                "custom_fields": {
                  "embedding": null,
                  "documents": null
                },
                "output_types": [
                  "VectorStore",
                  "FAISS",
                  "BaseRetriever"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "FAISS-ccfSO",
              "description": "Construct FAISS wrapper from raw documents.",
              "display_name": "FAISS"
            },
            "selected": false,
            "width": 384,
            "height": 377,
            "positionAbsolute": {
              "x": 1351.5117782170516,
              "y": 145.97210220118507
            },
            "dragging": false
          },
          {
            "id": "HuggingFaceEmbeddings-H58tP",
            "type": "genericNode",
            "position": {
              "x": 427.29924607166333,
              "y": 640.3529060105794
            },
            "data": {
              "type": "HuggingFaceEmbeddings",
              "node": {
                "template": {
                  "cache_folder": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "cache_folder",
                    "display_name": "Cache Folder",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true,
                    "value": ""
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from langflow import CustomComponent\nfrom typing import Optional, Dict\nfrom langchain_community.embeddings.huggingface import HuggingFaceEmbeddings\n\n\nclass HuggingFaceEmbeddingsComponent(CustomComponent):\n    display_name = \"HuggingFaceEmbeddings\"\n    description = \"HuggingFace sentence_transformers embedding models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers\"\n    )\n\n    def build_config(self):\n        return {\n            \"cache_folder\": {\"display_name\": \"Cache Folder\", \"advanced\": True},\n            \"encode_kwargs\": {\"display_name\": \"Encode Kwargs\", \"advanced\": True, \"field_type\": \"dict\"},\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"field_type\": \"dict\", \"advanced\": True},\n            \"model_name\": {\"display_name\": \"Model Name\"},\n            \"multi_process\": {\"display_name\": \"Multi Process\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        cache_folder: Optional[str] = None,\n        encode_kwargs: Optional[Dict] = {},\n        model_kwargs: Optional[Dict] = {},\n        model_name: str = \"sentence-transformers/all-mpnet-base-v2\",\n        multi_process: bool = False,\n    ) -> HuggingFaceEmbeddings:\n        return HuggingFaceEmbeddings(\n            cache_folder=cache_folder,\n            encode_kwargs=encode_kwargs,\n            model_kwargs=model_kwargs,\n            model_name=model_name,\n            multi_process=multi_process,\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "encode_kwargs": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": [],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "encode_kwargs",
                    "display_name": "Encode Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_kwargs": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": [],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_name": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "sentence-transformers/all-mpnet-base-v2",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "multi_process": {
                    "type": "bool",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "multi_process",
                    "display_name": "Multi Process",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "HuggingFace sentence_transformers embedding models.",
                "base_classes": [
                  "HuggingFaceEmbeddings",
                  "Embeddings"
                ],
                "display_name": "HuggingFaceEmbeddings",
                "documentation": "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers",
                "custom_fields": {
                  "cache_folder": null,
                  "encode_kwargs": null,
                  "model_kwargs": null,
                  "model_name": null,
                  "multi_process": null
                },
                "output_types": [
                  "HuggingFaceEmbeddings"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "HuggingFaceEmbeddings-H58tP"
            },
            "selected": false,
            "width": 384,
            "height": 488,
            "dragging": false,
            "positionAbsolute": {
              "x": 427.29924607166333,
              "y": 640.3529060105794
            }
          },
          {
            "id": "ChatOpenAI-WtDcG",
            "type": "genericNode",
            "position": {
              "x": 731.5268851407039,
              "y": -376.4293083379196
            },
            "data": {
              "type": "ChatOpenAI",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "max_tokens": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 256,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_tokens",
                    "display_name": "Max Tokens",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "gpt-3.5-turbo-0125",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "gpt-4-turbo-preview",
                      "gpt-4-0125-preview",
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-3.5-turbo-0125",
                      "gpt-3.5-turbo-1106"
                    ],
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                    "title_case": true,
                    "value": "https://api.chatanywhere.com.cn"
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true,
                    "value": "sk-Ms5F2wAkilaaZYo0HpumWR7qBLkOIsXflNQeAHSrNtmUYjzk"
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "0.2",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "`OpenAI` Chat large language models API.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseLLM",
                  "BaseLanguageModel"
                ],
                "display_name": "ChatOpenAI",
                "documentation": "",
                "custom_fields": {
                  "max_tokens": null,
                  "model_kwargs": null,
                  "model_name": null,
                  "openai_api_base": null,
                  "openai_api_key": null,
                  "temperature": null
                },
                "output_types": [
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "ChatOpenAI-WtDcG"
            },
            "selected": false,
            "width": 384,
            "height": 730,
            "positionAbsolute": {
              "x": 731.5268851407039,
              "y": -376.4293083379196
            },
            "dragging": false
          },
          {
            "id": "RetrievalQA-D7J6k",
            "type": "genericNode",
            "position": {
              "x": 2317.3323528362303,
              "y": 199.48630691726305
            },
            "data": {
              "type": "RetrievalQA",
              "node": {
                "output_types": [],
                "display_name": "Basic RAG",
                "documentation": "",
                "base_classes": [
                  "BaseRetrievalQA",
                  "RetrievalQA",
                  "Chain",
                  "Callable"
                ],
                "description": "double click to edit description",
                "template": {
                  "callbacks_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "callbacks",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                    "list": true,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "callbacks"
                    },
                    "display_name": "Callbacks"
                  },
                  "memory_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BaseMemory",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "memory"
                    },
                    "display_name": "Memory"
                  },
                  "input_key_RetrievalQA-Hhe38": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "query",
                    "password": false,
                    "name": "input_key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "input_key"
                    },
                    "display_name": "Input Key"
                  },
                  "metadata_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "metadata",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "metadata"
                    },
                    "display_name": "Metadata"
                  },
                  "output_key_RetrievalQA-Hhe38": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "result",
                    "password": false,
                    "name": "output_key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "output_key"
                    },
                    "display_name": "Output Key"
                  },
                  "return_source_documents_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": true,
                    "password": false,
                    "name": "return_source_documents",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "return_source_documents"
                    },
                    "display_name": "Return Source Documents"
                  },
                  "tags_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "tags",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "tags"
                    },
                    "display_name": "Tags"
                  },
                  "verbose_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "verbose",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "verbose"
                    },
                    "display_name": "Verbose"
                  },
                  "code_Chroma-dUHtN": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from typing import Optional, Union\nfrom langflow import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "code"
                    },
                    "display_name": "Code"
                  },
                  "chroma_server_cors_allow_origins_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_cors_allow_origins",
                    "display_name": "Server CORS Allow Origins",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_cors_allow_origins"
                    }
                  },
                  "chroma_server_grpc_port_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_grpc_port",
                    "display_name": "Server gRPC Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_grpc_port"
                    }
                  },
                  "chroma_server_host_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_host",
                    "display_name": "Server Host",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_host"
                    }
                  },
                  "chroma_server_port_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_port",
                    "display_name": "Server Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_port"
                    }
                  },
                  "chroma_server_ssl_enabled_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "chroma_server_ssl_enabled",
                    "display_name": "Server SSL Enabled",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_ssl_enabled"
                    }
                  },
                  "collection_name_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "langflow",
                    "password": false,
                    "name": "collection_name",
                    "display_name": "Collection Name",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "collection_name"
                    }
                  },
                  "embedding_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "embedding",
                    "display_name": "Embedding",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Embeddings",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "embedding"
                    }
                  },
                  "persist_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "persist",
                    "display_name": "Persist",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "persist"
                    }
                  },
                  "persist_directory_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "persist_directory",
                    "display_name": "Persist Directory",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "persist_directory"
                    }
                  },
                  "llm_CombineDocsChain-ZlGNS": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BaseLanguageModel",
                    "list": false,
                    "proxy": {
                      "id": "CombineDocsChain-ZlGNS",
                      "field": "llm"
                    }
                  },
                  "chain_type_CombineDocsChain-ZlGNS": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "stuff",
                    "password": false,
                    "options": [
                      "stuff",
                      "map_reduce",
                      "map_rerank",
                      "refine"
                    ],
                    "name": "chain_type",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "CombineDocsChain-ZlGNS",
                      "field": "chain_type"
                    },
                    "display_name": "Chain Type"
                  },
                  "code_CustomComponent-715vY": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false,
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "code"
                    },
                    "display_name": "Code"
                  },
                  "file_path_CustomComponent-715vY": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "file_path",
                    "display_name": "File Path",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "file",
                    "list": false,
                    "fileTypes": [
                      "json",
                      "txt",
                      "csv",
                      "jsonl",
                      "html",
                      "htm",
                      "conllu",
                      "enex",
                      "msg",
                      "pdf",
                      "srt",
                      "eml",
                      "md",
                      "pptx",
                      "docx"
                    ],
                    "file_path": "/Users/rodrigonader/Library/Caches/langflow/f2b1ae44-3df4-4b22-9153-99e7d8abb51c/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                    "value": "",
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "file_path"
                    }
                  },
                  "loader_CustomComponent-715vY": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "Automatic",
                    "password": false,
                    "options": [
                      "Automatic",
                      "Airbyte JSON (.jsonl)",
                      "JSON (.json)",
                      "BeautifulSoup4 HTML (.html, .htm)",
                      "CSV (.csv)",
                      "CoNLL-U (.conllu)",
                      "EverNote (.enex)",
                      "Facebook Chat (.json)",
                      "Outlook Message (.msg)",
                      "PyPDF (.pdf)",
                      "Subtitle (.str)",
                      "Text (.txt)",
                      "Unstructured Email (.eml)",
                      "Unstructured HTML (.html, .htm)",
                      "Unstructured Markdown (.md)",
                      "Unstructured PowerPoint (.pptx)",
                      "Unstructured Word (.docx)"
                    ],
                    "name": "loader",
                    "display_name": "Loader",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "loader"
                    }
                  },
                  "chunk_overlap_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": 200,
                    "password": false,
                    "name": "chunk_overlap",
                    "display_name": "Chunk Overlap",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "chunk_overlap"
                    }
                  },
                  "chunk_size_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": 1000,
                    "password": false,
                    "name": "chunk_size",
                    "display_name": "Chunk Size",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "chunk_size"
                    }
                  },
                  "separator_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": " ",
                    "password": false,
                    "name": "separator",
                    "display_name": "Separator",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "separator"
                    }
                  }
                },
                "flow": {
                  "data": {
                    "nodes": [
                      {
                        "width": 384,
                        "height": 339,
                        "id": "RetrievalQA-Hhe38",
                        "type": "genericNode",
                        "position": {
                          "x": 786.0148744080102,
                          "y": 224.0922500095482
                        },
                        "data": {
                          "type": "RetrievalQA",
                          "node": {
                            "template": {
                              "callbacks": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "callbacks",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                                "list": true
                              },
                              "combine_documents_chain": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "combine_documents_chain",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseCombineDocumentsChain",
                                "list": false
                              },
                              "memory": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "memory",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseMemory",
                                "list": false
                              },
                              "retriever": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "retriever",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseRetriever",
                                "list": false
                              },
                              "input_key": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "query",
                                "password": false,
                                "name": "input_key",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "metadata": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "metadata",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "output_key": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "result",
                                "password": false,
                                "name": "output_key",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "return_source_documents": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": true,
                                "password": false,
                                "name": "return_source_documents",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "tags": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "tags",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "verbose": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "_type": "RetrievalQA"
                            },
                            "description": "Chain for question-answering against an index.",
                            "base_classes": [
                              "BaseRetrievalQA",
                              "RetrievalQA",
                              "Chain",
                              "Callable"
                            ],
                            "display_name": "RetrievalQA",
                            "custom_fields": {},
                            "output_types": [],
                            "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
                            "beta": false,
                            "error": null
                          },
                          "id": "RetrievalQA-Hhe38"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 786.0148744080102,
                          "y": 224.0922500095482
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 539,
                        "id": "Chroma-dUHtN",
                        "type": "genericNode",
                        "position": {
                          "x": 233.28825393386717,
                          "y": 329.51112502864464
                        },
                        "data": {
                          "type": "Chroma",
                          "node": {
                            "template": {
                              "code": {
                                "dynamic": true,
                                "required": true,
                                "placeholder": "",
                                "show": false,
                                "multiline": true,
                                "value": "from typing import Optional, Union\nfrom langflow import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "type": "code",
                                "list": false
                              },
                              "_type": "CustomComponent",
                              "chroma_server_cors_allow_origins": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_cors_allow_origins",
                                "display_name": "Server CORS Allow Origins",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "chroma_server_grpc_port": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_grpc_port",
                                "display_name": "Server gRPC Port",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chroma_server_host": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_host",
                                "display_name": "Server Host",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "chroma_server_port": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_port",
                                "display_name": "Server Port",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chroma_server_ssl_enabled": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "chroma_server_ssl_enabled",
                                "display_name": "Server SSL Enabled",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "collection_name": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "langflow",
                                "password": false,
                                "name": "collection_name",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "documents": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "documents",
                                "display_name": "Documents",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Document",
                                "list": true
                              },
                              "embedding": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "embedding",
                                "display_name": "Embedding",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Embeddings",
                                "list": false
                              },
                              "persist": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "persist",
                                "display_name": "Persist",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "persist_directory": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "persist_directory",
                                "display_name": "Persist Directory",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              }
                            },
                            "description": "Implementation of Vector Store using Chroma",
                            "base_classes": [
                              "VectorStore",
                              "BaseRetriever"
                            ],
                            "display_name": "Chroma",
                            "custom_fields": {
                              "chroma_server_cors_allow_origins": null,
                              "chroma_server_grpc_port": null,
                              "chroma_server_host": null,
                              "chroma_server_port": null,
                              "chroma_server_ssl_enabled": null,
                              "collection_name": null,
                              "documents": null,
                              "embedding": null,
                              "persist": null,
                              "persist_directory": null
                            },
                            "output_types": [
                              "Chroma"
                            ],
                            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                            "beta": true,
                            "error": null
                          },
                          "id": "Chroma-dUHtN"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 233.28825393386717,
                          "y": 329.51112502864464
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 333,
                        "id": "CombineDocsChain-ZlGNS",
                        "type": "genericNode",
                        "position": {
                          "x": 218.59271730686442,
                          "y": -167.93319837803648
                        },
                        "data": {
                          "type": "CombineDocsChain",
                          "node": {
                            "template": {
                              "llm": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "llm",
                                "display_name": "LLM",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseLanguageModel",
                                "list": false
                              },
                              "chain_type": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "stuff",
                                "password": false,
                                "options": [
                                  "stuff",
                                  "map_reduce",
                                  "map_rerank",
                                  "refine"
                                ],
                                "name": "chain_type",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "_type": "load_qa_chain"
                            },
                            "description": "Load question answering chain.",
                            "base_classes": [
                              "BaseCombineDocumentsChain",
                              "Callable"
                            ],
                            "display_name": "CombineDocsChain",
                            "custom_fields": {},
                            "output_types": [],
                            "documentation": "",
                            "beta": false,
                            "error": null
                          },
                          "id": "CombineDocsChain-ZlGNS"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 218.59271730686442,
                          "y": -167.93319837803648
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 457,
                        "id": "CustomComponent-715vY",
                        "type": "genericNode",
                        "position": {
                          "x": -947.6155160488396,
                          "y": 293.1413507229215
                        },
                        "data": {
                          "type": "CustomComponent",
                          "node": {
                            "template": {
                              "code": {
                                "dynamic": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": true,
                                "value": "from langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "type": "code",
                                "list": false
                              },
                              "_type": "CustomComponent",
                              "file_path": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "file_path",
                                "display_name": "File Path",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "file",
                                "list": false,
                                "fileTypes": [
                                  "json",
                                  "txt",
                                  "csv",
                                  "jsonl",
                                  "html",
                                  "htm",
                                  "conllu",
                                  "enex",
                                  "msg",
                                  "pdf",
                                  "srt",
                                  "eml",
                                  "md",
                                  "pptx",
                                  "docx"
                                ],
                                "file_path": "/Users/rodrigonader/Library/Caches/langflow/13ca1b26-ed4a-457b-8e00-eab94d5448dc/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                                "value": ""
                              },
                              "loader": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "Automatic",
                                "password": false,
                                "options": [
                                  "Automatic",
                                  "Airbyte JSON (.jsonl)",
                                  "JSON (.json)",
                                  "BeautifulSoup4 HTML (.html, .htm)",
                                  "CSV (.csv)",
                                  "CoNLL-U (.conllu)",
                                  "EverNote (.enex)",
                                  "Facebook Chat (.json)",
                                  "Outlook Message (.msg)",
                                  "PyPDF (.pdf)",
                                  "Subtitle (.str)",
                                  "Text (.txt)",
                                  "Unstructured Email (.eml)",
                                  "Unstructured HTML (.html, .htm)",
                                  "Unstructured Markdown (.md)",
                                  "Unstructured PowerPoint (.pptx)",
                                  "Unstructured Word (.docx)"
                                ],
                                "name": "loader",
                                "display_name": "Loader",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              }
                            },
                            "description": "A generic loader that auto-detects file types.",
                            "base_classes": [
                              "Document"
                            ],
                            "display_name": "File Loader",
                            "custom_fields": {
                              "file_path": null,
                              "loader": null
                            },
                            "output_types": [
                              "Document"
                            ],
                            "documentation": "",
                            "beta": true,
                            "error": null,
                            "official": false
                          },
                          "id": "CustomComponent-715vY"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": -947.6155160488396,
                          "y": 293.1413507229215
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 501,
                        "id": "CharacterTextSplitter-PaUem",
                        "type": "genericNode",
                        "position": {
                          "x": -314.0779657410157,
                          "y": 23.837018963891467
                        },
                        "data": {
                          "type": "CharacterTextSplitter",
                          "node": {
                            "template": {
                              "documents": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "documents",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Document",
                                "list": true
                              },
                              "chunk_overlap": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": 200,
                                "password": false,
                                "name": "chunk_overlap",
                                "display_name": "Chunk Overlap",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chunk_size": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": 1000,
                                "password": false,
                                "name": "chunk_size",
                                "display_name": "Chunk Size",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "separator": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": " ",
                                "password": false,
                                "name": "separator",
                                "display_name": "Separator",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "_type": "CharacterTextSplitter"
                            },
                            "description": "Splitting text that looks at characters.",
                            "base_classes": [
                              "Document"
                            ],
                            "display_name": "CharacterTextSplitter",
                            "custom_fields": {},
                            "output_types": [
                              "Document"
                            ],
                            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
                            "beta": false,
                            "error": null
                          },
                          "id": "CharacterTextSplitter-PaUem"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": -314.0779657410157,
                          "y": 23.837018963891467
                        },
                        "dragging": false
                      }
                    ],
                    "edges": [
                      {
                        "source": "Chroma-dUHtN",
                        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}",
                        "target": "RetrievalQA-Hhe38",
                        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "retriever",
                            "id": "RetrievalQA-Hhe38",
                            "inputTypes": null,
                            "type": "BaseRetriever"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "VectorStore",
                              "BaseRetriever"
                            ],
                            "dataType": "Chroma",
                            "id": "Chroma-dUHtN"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-Chroma-dUHtN{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}-RetrievalQA-Hhe38{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                        "selected": true
                      },
                      {
                        "source": "CombineDocsChain-ZlGNS",
                        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}",
                        "target": "RetrievalQA-Hhe38",
                        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "combine_documents_chain",
                            "id": "RetrievalQA-Hhe38",
                            "inputTypes": null,
                            "type": "BaseCombineDocumentsChain"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "BaseCombineDocumentsChain",
                              "Callable"
                            ],
                            "dataType": "CombineDocsChain",
                            "id": "CombineDocsChain-ZlGNS"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CombineDocsChain-ZlGNS{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}-RetrievalQA-Hhe38{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                        "selected": true
                      },
                      {
                        "source": "CustomComponent-715vY",
                        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}",
                        "target": "CharacterTextSplitter-PaUem",
                        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "documents",
                            "id": "CharacterTextSplitter-PaUem",
                            "inputTypes": null,
                            "type": "Document"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "Document"
                            ],
                            "dataType": "CustomComponent",
                            "id": "CustomComponent-715vY"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CustomComponent-715vY{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}-CharacterTextSplitter-PaUem{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "selected": true
                      },
                      {
                        "source": "CharacterTextSplitter-PaUem",
                        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}",
                        "target": "Chroma-dUHtN",
                        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "documents",
                            "id": "Chroma-dUHtN",
                            "inputTypes": null,
                            "type": "Document"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "Document"
                            ],
                            "dataType": "CharacterTextSplitter",
                            "id": "CharacterTextSplitter-PaUem"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CharacterTextSplitter-PaUem{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}-Chroma-dUHtN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "selected": true
                      }
                    ],
                    "viewport": {
                      "x": 577.3649569565561,
                      "y": 227.84214213787357,
                      "zoom": 0.48903173672367245
                    }
                  },
                  "is_component": false,
                  "name": "Silly Poitras",
                  "description": "",
                  "id": "F7KdT"
                },
                "official": false
              },
              "id": "RetrievalQA-D7J6k"
            },
            "selected": true,
            "width": 384,
            "height": 425,
            "positionAbsolute": {
              "x": 2317.3323528362303,
              "y": 199.48630691726305
            },
            "dragging": false
          }
        ],
        "edges": [
          {
            "source": "PyPDFLoader-Qavc0",
            "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-Qavc0œ}",
            "target": "CharacterTextSplitter-79uDG",
            "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-79uDGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
            "data": {
              "targetHandle": {
                "fieldName": "documents",
                "id": "CharacterTextSplitter-79uDG",
                "inputTypes": null,
                "type": "Document"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Document"
                ],
                "dataType": "PyPDFLoader",
                "id": "PyPDFLoader-Qavc0"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PyPDFLoader-Qavc0{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-Qavc0œ}-CharacterTextSplitter-79uDG{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-79uDGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
          },
          {
            "source": "CombineDocsChain-w6jms",
            "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-w6jmsœ}",
            "target": "RetrievalQA-zFB82",
            "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-zFB82œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
            "data": {
              "targetHandle": {
                "fieldName": "combine_documents_chain",
                "id": "RetrievalQA-zFB82",
                "inputTypes": null,
                "type": "BaseCombineDocumentsChain"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseCombineDocumentsChain",
                  "Callable"
                ],
                "dataType": "CombineDocsChain",
                "id": "CombineDocsChain-w6jms"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-CombineDocsChain-w6jms{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-w6jmsœ}-RetrievalQA-zFB82{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-zFB82œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
          },
          {
            "source": "CharacterTextSplitter-79uDG",
            "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-79uDGœ}",
            "target": "FAISS-ccfSO",
            "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œFAISS-ccfSOœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
            "data": {
              "targetHandle": {
                "fieldName": "documents",
                "id": "FAISS-ccfSO",
                "inputTypes": null,
                "type": "Document"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Document"
                ],
                "dataType": "CharacterTextSplitter",
                "id": "CharacterTextSplitter-79uDG"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-CharacterTextSplitter-79uDG{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-79uDGœ}-FAISS-ccfSO{œfieldNameœ:œdocumentsœ,œidœ:œFAISS-ccfSOœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
          },
          {
            "source": "FAISS-ccfSO",
            "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œFAISSœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-ccfSOœ}",
            "target": "RetrievalQA-zFB82",
            "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-zFB82œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
            "data": {
              "targetHandle": {
                "fieldName": "retriever",
                "id": "RetrievalQA-zFB82",
                "inputTypes": null,
                "type": "BaseRetriever"
              },
              "sourceHandle": {
                "baseClasses": [
                  "VectorStore",
                  "FAISS",
                  "VectorStore",
                  "BaseRetriever"
                ],
                "dataType": "FAISS",
                "id": "FAISS-ccfSO"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-FAISS-ccfSO{œbaseClassesœ:[œVectorStoreœ,œFAISSœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-ccfSOœ}-RetrievalQA-zFB82{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-zFB82œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
          },
          {
            "source": "HuggingFaceEmbeddings-H58tP",
            "sourceHandle": "{œbaseClassesœ:[œHuggingFaceEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-H58tPœ}",
            "target": "FAISS-ccfSO",
            "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œFAISS-ccfSOœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
            "data": {
              "targetHandle": {
                "fieldName": "embedding",
                "id": "FAISS-ccfSO",
                "inputTypes": null,
                "type": "Embeddings"
              },
              "sourceHandle": {
                "baseClasses": [
                  "HuggingFaceEmbeddings",
                  "Embeddings"
                ],
                "dataType": "HuggingFaceEmbeddings",
                "id": "HuggingFaceEmbeddings-H58tP"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-HuggingFaceEmbeddings-H58tP{œbaseClassesœ:[œHuggingFaceEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-H58tPœ}-FAISS-ccfSO{œfieldNameœ:œembeddingœ,œidœ:œFAISS-ccfSOœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
          },
          {
            "source": "ChatOpenAI-WtDcG",
            "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WtDcGœ}",
            "target": "CombineDocsChain-w6jms",
            "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-w6jmsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
            "data": {
              "targetHandle": {
                "fieldName": "llm",
                "id": "CombineDocsChain-w6jms",
                "inputTypes": null,
                "type": "BaseLanguageModel"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseLanguageModel",
                  "BaseLLM",
                  "BaseLanguageModel"
                ],
                "dataType": "ChatOpenAI",
                "id": "ChatOpenAI-WtDcG"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-ChatOpenAI-WtDcG{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WtDcGœ}-CombineDocsChain-w6jms{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-w6jmsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
          }
        ],
        "viewport": {
          "x": 44.6013027571189,
          "y": 283.2165783876173,
          "zoom": 0.3318525045834181
        }
      },
      "is_component": false,
      "updated_at": "2024-05-07T02:23:49.269004",
      "folder": null,
      "id": "b0c34de0-0ff0-4cd2-98c9-e391ac7e0c77",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "Document Processor",
      "description": "This component processes a document",
      "data": {
        "edges": [],
        "nodes": [
          {
            "data": {
              "type": "Data",
              "node": {
                "template": {
                  "document": {
                    "type": "Document",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "document",
                    "display_name": "Document",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from langflow import CustomComponent\r\nfrom langchain.schema import Document\r\n\r\nclass DocumentProcessor(CustomComponent):\r\n    display_name = \"Document Processor\"\r\n    description = \"This component processes a document\"\r\n\r\n    def build_config(self) -> dict:\r\n        options = [\"Uppercase\", \"Lowercase\", \"Titlecase\"]\r\n        return {\r\n            \"function\": {\"options\": options,\r\n                     \"value\": options[0],\r\n                     \"display_name\": \"Function\"\r\n                        },\r\n            \"document\": {\"display_name\": \"Document\"}\r\n                }\r\n\r\n    def build(self, document: Document, function: str, input: str) -> Document:\r\n        if isinstance(document, list):\r\n            document = document[0]\r\n        page_content = document.page_content\r\n        if function == \"Uppercase\":\r\n            page_content = page_content.upper()\r\n        elif function == \"Lowercase\":\r\n            page_content = page_content.lower()\r\n        elif function == \"Titlecase\":\r\n            page_content = page_content.title()\r\n        self.repr_value = f\"Result of {function} function: {page_content}\"\r\n        return Document(page_content = page_content)\r\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "function": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Uppercase",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Uppercase",
                      "Lowercase",
                      "Titlecase"
                    ],
                    "name": "function",
                    "display_name": "Function",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "input": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "This component processes a document",
                "base_classes": [
                  "Document"
                ],
                "display_name": "Document Processor",
                "documentation": "",
                "custom_fields": {
                  "document": null,
                  "function": null,
                  "input": null
                },
                "output_types": [
                  "Document"
                ],
                "field_formatters": {},
                "beta": true,
                "official": false
              },
              "id": "Data-df93e",
              "description": "This component processes a document",
              "display_name": "Document Processor"
            },
            "id": "Data-df93e",
            "position": {
              "x": 0,
              "y": 0
            },
            "type": "genericNode"
          }
        ],
        "viewport": {
          "x": 1,
          "y": 1,
          "zoom": 1
        }
      },
      "is_component": true,
      "updated_at": "2024-05-06T06:03:29.526733",
      "folder": null,
      "id": "1fcae156-982c-4ff8-b014-d5ccf9c80a39",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "Metaphor Search",
      "description": "Search in Metaphor with a custom string.",
      "data": {
        "edges": [],
        "nodes": [
          {
            "data": {
              "type": "CustomComponent (rSplF)",
              "node": {
                "template": {
                  "code": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": true,
                    "value": "from langflow import CustomComponent\nfrom typing import List, Union\nfrom langchain.llms.base import BaseLLM\nfrom langchain.chains import LLMChain\nfrom langchain import PromptTemplate\nfrom langchain.schema import Document\nfrom metaphor_python import Metaphor\nimport json\n\nfrom typing import List\nfrom langflow.field_typing import Data\n\nclass MetaphorSearch(CustomComponent):\n    display_name: str = \"Metaphor Search\"\n    description: str = \"Search in Metaphor with a custom string.\"\n    beta = True\n    \n    def build_config(self):\n        return {\n        \"metaphor_client\": {\"display_name\": \"Metaphor Wrapper\"},   \n        \"search_num_results\": {\"display_name\": \"Number of Results (per domain)\"},\n        \"include_domains\": {\"display_name\": \"Include Domains\",  \"is_list\": True},\n        \"start_date\": {\"display_name\": \"Start Date\"},\n        \"use_autoprompt\": {\"display_name\": \"Use Autoprompt\", \"type\": \"boolean\"},\n        \"search_type\": {\"display_name\": \"Search Type\", \"options\": [\"neural\", \"keyword\"]},\n        \"start_date\": {\"input_types\": [\"Data\"]}\n    }\n\n    def build(\n        self,\n        methaphor_client: Data,\n        query: str,\n        search_type: str='keyword',\n        search_num_results: int = 5,\n        include_domains: List[str]= [\"youtube.com\"],\n        use_autoprompt: bool = False,\n        start_date: str=\"2023-01-01\",\n        \n    ) -> Data:\n        \n        results = []\n        for domain in include_domains:\n            response = methaphor_client.search(\n                    query,\n                    num_results=int(search_num_results),\n                    include_domains=[domain],\n                    use_autoprompt=use_autoprompt,\n                    type=search_type,\n                    # start_crawl_date=start_date,\n                    start_published_date=start_date\n                )\n            results.extend(response.results)\n    \n        self.repr_value = results\n\n        return results\n\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false
                  },
                  "_type": "CustomComponent",
                  "include_domains": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": [
                      "youtube.com"
                    ],
                    "password": false,
                    "name": "include_domains",
                    "display_name": "Include Domains",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true
                  },
                  "methaphor_client": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "methaphor_client",
                    "display_name": "methaphor_client",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Data",
                    "list": false
                  },
                  "query": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "query",
                    "display_name": "query",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "value": "pastel"
                  },
                  "search_num_results": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": 5,
                    "password": false,
                    "name": "search_num_results",
                    "display_name": "Number of Results (per domain)",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false
                  },
                  "search_type": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "keyword",
                    "password": false,
                    "options": [
                      "neural",
                      "keyword"
                    ],
                    "name": "search_type",
                    "display_name": "Search Type",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true
                  },
                  "start_date": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "password": false,
                    "name": "start_date",
                    "display_name": "start_date",
                    "advanced": false,
                    "input_types": [
                      "Data"
                    ],
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false
                  },
                  "use_autoprompt": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "use_autoprompt",
                    "display_name": "Use Autoprompt",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false
                  }
                },
                "description": "Search in Metaphor with a custom string.",
                "base_classes": [
                  "Data"
                ],
                "display_name": "Metaphor Search (2)",
                "custom_fields": {
                  "include_domains": null,
                  "methaphor_client": null,
                  "query": null,
                  "search_num_results": null,
                  "search_type": null,
                  "start_date": null,
                  "use_autoprompt": null
                },
                "output_types": [
                  "Data"
                ],
                "documentation": "",
                "beta": true,
                "error": null,
                "official": false
              },
              "id": "CustomComponent (rSplF)-8wX5P"
            },
            "id": "CustomComponent (rSplF)-8wX5P",
            "position": {
              "x": 0,
              "y": 0
            },
            "type": "genericNode"
          }
        ],
        "viewport": {
          "x": 1,
          "y": 1,
          "zoom": 1
        }
      },
      "is_component": true,
      "updated_at": "2024-05-06T11:37:49.975853",
      "folder": null,
      "id": "b4e7abf9-f333-4ea9-b4fe-cc7f54f881ee",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "News Comparison",
      "description": "Lists differences between 2 news articles.",
      "data": {
        "nodes": [
          {
            "width": 384,
            "height": 371,
            "id": "UrlLoader-LYlvJ",
            "type": "genericNode",
            "position": {
              "x": 190.2723236588522,
              "y": 44.076889804003656
            },
            "data": {
              "type": "UrlLoader",
              "node": {
                "template": {
                  "code": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from typing import List\n\nfrom langchain import document_loaders\nfrom langchain.schema import Document\nfrom langflow import CustomComponent\n\n\nclass UrlLoaderComponent(CustomComponent):\n    display_name: str = \"Url Loader\"\n    description: str = \"Generic Url Loader Component\"\n\n    def build_config(self):\n        return {\n            \"web_path\": {\n                \"display_name\": \"Url\",\n                \"required\": True,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": [\n                    \"AZLyricsLoader\",\n                    \"CollegeConfidentialLoader\",\n                    \"GitbookLoader\",\n                    \"HNLoader\",\n                    \"IFixitLoader\",\n                    \"IMSDbLoader\",\n                    \"WebBaseLoader\",\n                ],\n                \"value\": \"WebBaseLoader\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, web_path: str, loader: str) -> List[Document]:\n        try:\n            loader_instance = getattr(document_loaders, loader)(web_path=web_path)\n        except Exception as e:\n            raise ValueError(f\"No loader found for: {web_path}\") from e\n        docs = loader_instance.load()\n        avg_length = sum(len(doc.page_content) for doc in docs if hasattr(doc, \"page_content\")) / len(docs)\n        self.status = f\"\"\"{len(docs)} documents)\n        \\nAvg. Document Length (characters): {int(avg_length)}\n        Documents: {docs[:3]}...\"\"\"\n        return docs\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false
                  },
                  "_type": "CustomComponent",
                  "loader": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "WebBaseLoader",
                    "password": false,
                    "options": [
                      "AZLyricsLoader",
                      "CollegeConfidentialLoader",
                      "GitbookLoader",
                      "HNLoader",
                      "IFixitLoader",
                      "IMSDbLoader",
                      "WebBaseLoader"
                    ],
                    "name": "loader",
                    "display_name": "Loader",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true
                  },
                  "web_path": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "web_path",
                    "display_name": "Url",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "value": "https://www.theverge.com/2023/12/6/23990466/google-gemini-llm-ai-model"
                  }
                },
                "description": "Generic Url Loader Component",
                "base_classes": [
                  "Document"
                ],
                "display_name": "Url Loader",
                "custom_fields": {
                  "loader": null,
                  "web_path": null
                },
                "output_types": [
                  "UrlLoader"
                ],
                "documentation": "",
                "beta": true,
                "error": null
              },
              "id": "UrlLoader-LYlvJ"
            },
            "selected": false,
            "positionAbsolute": {
              "x": 190.2723236588522,
              "y": 44.076889804003656
            },
            "dragging": false
          },
          {
            "width": 384,
            "height": 371,
            "id": "UrlLoader-AFwPy",
            "type": "genericNode",
            "position": {
              "x": 190.4889517194398,
              "y": 537.9610588548486
            },
            "data": {
              "type": "UrlLoader",
              "node": {
                "template": {
                  "code": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from typing import List\n\nfrom langchain import document_loaders\nfrom langchain.schema import Document\nfrom langflow import CustomComponent\n\n\nclass UrlLoaderComponent(CustomComponent):\n    display_name: str = \"Url Loader\"\n    description: str = \"Generic Url Loader Component\"\n\n    def build_config(self):\n        return {\n            \"web_path\": {\n                \"display_name\": \"Url\",\n                \"required\": True,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": [\n                    \"AZLyricsLoader\",\n                    \"CollegeConfidentialLoader\",\n                    \"GitbookLoader\",\n                    \"HNLoader\",\n                    \"IFixitLoader\",\n                    \"IMSDbLoader\",\n                    \"WebBaseLoader\",\n                ],\n                \"value\": \"WebBaseLoader\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, web_path: str, loader: str) -> List[Document]:\n        try:\n            loader_instance = getattr(document_loaders, loader)(web_path=web_path)\n        except Exception as e:\n            raise ValueError(f\"No loader found for: {web_path}\") from e\n        docs = loader_instance.load()\n        avg_length = sum(len(doc.page_content) for doc in docs if hasattr(doc, \"page_content\")) / len(docs)\n        self.status = f\"\"\"{len(docs)} documents)\n        \\nAvg. Document Length (characters): {int(avg_length)}\n        Documents: {docs[:3]}...\"\"\"\n        return docs\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false
                  },
                  "_type": "CustomComponent",
                  "loader": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "WebBaseLoader",
                    "password": false,
                    "options": [
                      "AZLyricsLoader",
                      "CollegeConfidentialLoader",
                      "GitbookLoader",
                      "HNLoader",
                      "IFixitLoader",
                      "IMSDbLoader",
                      "WebBaseLoader"
                    ],
                    "name": "loader",
                    "display_name": "Loader",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true
                  },
                  "web_path": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "web_path",
                    "display_name": "Url",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "value": "https://www.cnbc.com/2023/12/06/google-launches-its-largest-and-most-capable-ai-model-gemini.html"
                  }
                },
                "description": "Generic Url Loader Component",
                "base_classes": [
                  "Document"
                ],
                "display_name": "Url Loader",
                "custom_fields": {
                  "loader": null,
                  "web_path": null
                },
                "output_types": [
                  "UrlLoader"
                ],
                "documentation": "",
                "beta": true,
                "error": null
              },
              "id": "UrlLoader-AFwPy"
            },
            "selected": false,
            "positionAbsolute": {
              "x": 190.4889517194398,
              "y": 537.9610588548486
            },
            "dragging": false
          },
          {
            "width": 384,
            "height": 469,
            "id": "PromptTemplate-rpXBt",
            "type": "genericNode",
            "position": {
              "x": 823.7245097763398,
              "y": 213.27569776337248
            },
            "data": {
              "type": "PromptTemplate",
              "node": {
                "template": {
                  "output_parser": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "output_parser",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "BaseOutputParser",
                    "list": false
                  },
                  "input_types": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "input_types",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "dict",
                    "list": false
                  },
                  "input_variables": {
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "input_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "value": [
                      "article1",
                      "article2"
                    ]
                  },
                  "partial_variables": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "partial_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "dict",
                    "list": false
                  },
                  "template": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": true,
                    "password": false,
                    "name": "template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "prompt",
                    "list": false,
                    "value": "Below are two news articles.\n\n---\n\nArticle 1\n\n{article1}\n\n---\n\nArticle 2\n\n{article2}\n\n---\n\nCreate 3 bullet points comparing them and showing the main difference in the way the news is provided. Just comment about the most noticeable differences.\n\nComparison:\n"
                  },
                  "template_format": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": "f-string",
                    "password": false,
                    "name": "template_format",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "str",
                    "list": false
                  },
                  "validate_template": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "validate_template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "type": "bool",
                    "list": false
                  },
                  "_type": "PromptTemplate",
                  "article1": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "password": false,
                    "name": "article1",
                    "display_name": "article1",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false
                  },
                  "article2": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "password": false,
                    "name": "article2",
                    "display_name": "article2",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false
                  }
                },
                "description": "A prompt template for a language model.",
                "base_classes": [
                  "StringPromptTemplate",
                  "BasePromptTemplate",
                  "PromptTemplate"
                ],
                "name": "",
                "display_name": "PromptTemplate",
                "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                "custom_fields": {
                  "": [
                    "article1",
                    "article2"
                  ]
                },
                "output_types": [],
                "full_path": null,
                "field_formatters": {},
                "beta": false,
                "error": null
              },
              "id": "PromptTemplate-rpXBt"
            },
            "selected": false,
            "positionAbsolute": {
              "x": 823.7245097763398,
              "y": 213.27569776337248
            },
            "dragging": false
          },
          {
            "width": 384,
            "height": 553,
            "id": "GroupNode-d8KdT",
            "type": "genericNode",
            "position": {
              "x": 1437.6059765336756,
              "y": 369.31672838558967
            },
            "data": {
              "type": "LLMChain",
              "node": {
                "output_types": [
                  "LLMChain"
                ],
                "display_name": "OpenAI Runner",
                "documentation": "",
                "base_classes": [
                  "Chain",
                  "Callable"
                ],
                "description": "double click to edit description",
                "template": {
                  "callbacks_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "callbacks",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                    "list": true,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "callbacks"
                    },
                    "display_name": "Callbacks"
                  },
                  "async_client_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "async_client",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Any",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "async_client"
                    },
                    "display_name": "Async Client"
                  },
                  "cache_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "cache",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "cache"
                    },
                    "display_name": "Cache"
                  },
                  "client_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "client",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Any",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "client"
                    },
                    "display_name": "Client"
                  },
                  "default_headers_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "default_headers",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "default_headers"
                    },
                    "display_name": "Default Headers"
                  },
                  "default_query_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "default_query",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "default_query"
                    },
                    "display_name": "Default Query"
                  },
                  "http_client_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "http_client",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Any",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "http_client"
                    },
                    "display_name": "Http Client"
                  },
                  "max_retries_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": 2,
                    "password": false,
                    "name": "max_retries",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "max_retries"
                    },
                    "display_name": "Max Retries"
                  },
                  "max_tokens_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": true,
                    "name": "max_tokens",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "max_tokens"
                    },
                    "display_name": "Max Tokens",
                    "value": ""
                  },
                  "metadata_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "metadata",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "metadata"
                    },
                    "display_name": "Metadata"
                  },
                  "model_kwargs_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "model_kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "model_kwargs"
                    },
                    "display_name": "Model Kwargs"
                  },
                  "model_name_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "gpt-4-1106-preview",
                    "password": false,
                    "options": [
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-4",
                      "gpt-4-32k",
                      "gpt-3.5-turbo",
                      "gpt-3.5-turbo-16k"
                    ],
                    "name": "model_name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "model_name"
                    },
                    "display_name": "Model Name"
                  },
                  "n_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": 1,
                    "password": false,
                    "name": "n",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "n"
                    },
                    "display_name": "N"
                  },
                  "openai_api_base_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": true,
                    "dynamic": false,
                    "info": "\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "openai_api_base"
                    }
                  },
                  "openai_api_key_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "openai_api_key"
                    }
                  },
                  "openai_organization_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "openai_organization",
                    "display_name": "OpenAI Organization",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "openai_organization"
                    }
                  },
                  "openai_proxy_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "openai_proxy",
                    "display_name": "OpenAI Proxy",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "openai_proxy"
                    }
                  },
                  "request_timeout_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "request_timeout",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "float",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "request_timeout"
                    },
                    "display_name": "Request Timeout"
                  },
                  "streaming_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "streaming",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "streaming"
                    },
                    "display_name": "Streaming"
                  },
                  "tags_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "tags",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "tags"
                    },
                    "display_name": "Tags"
                  },
                  "temperature_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "0.1",
                    "password": false,
                    "name": "temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "float",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "temperature"
                    },
                    "display_name": "Temperature"
                  },
                  "tiktoken_model_name_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "tiktoken_model_name",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "tiktoken_model_name"
                    },
                    "display_name": "Tiktoken Model Name"
                  },
                  "verbose_ChatOpenAI-UUprY": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "verbose",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "ChatOpenAI-UUprY",
                      "field": "verbose"
                    },
                    "display_name": "Verbose"
                  },
                  "code_LLMChain-IUiMS": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false,
                    "proxy": {
                      "id": "LLMChain-IUiMS",
                      "field": "code"
                    },
                    "display_name": "Code"
                  },
                  "memory_LLMChain-IUiMS": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "memory",
                    "display_name": "Memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BaseMemory",
                    "list": false,
                    "proxy": {
                      "id": "LLMChain-IUiMS",
                      "field": "memory"
                    }
                  },
                  "prompt_LLMChain-IUiMS": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "prompt",
                    "display_name": "Prompt",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BasePromptTemplate",
                    "list": false,
                    "proxy": {
                      "id": "LLMChain-IUiMS",
                      "field": "prompt"
                    }
                  }
                },
                "flow": {
                  "data": {
                    "nodes": [
                      {
                        "width": 384,
                        "height": 629,
                        "id": "ChatOpenAI-UUprY",
                        "type": "genericNode",
                        "position": {
                          "x": 880.5692501813826,
                          "y": 59.58244540558999
                        },
                        "data": {
                          "type": "ChatOpenAI",
                          "node": {
                            "template": {
                              "callbacks": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "callbacks",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                                "list": true
                              },
                              "async_client": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "async_client",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Any",
                                "list": false
                              },
                              "cache": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "cache",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "client": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "client",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Any",
                                "list": false
                              },
                              "default_headers": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "default_headers",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "default_query": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "default_query",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "http_client": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "http_client",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Any",
                                "list": false
                              },
                              "max_retries": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "value": 2,
                                "password": false,
                                "name": "max_retries",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "max_tokens": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": true,
                                "name": "max_tokens",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "metadata": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "metadata",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "model_kwargs": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "model_kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "model_name": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "gpt-3.5-turbo",
                                "password": false,
                                "options": [
                                  "gpt-4-1106-preview",
                                  "gpt-4-vision-preview",
                                  "gpt-4",
                                  "gpt-4-32k",
                                  "gpt-3.5-turbo",
                                  "gpt-3.5-turbo-16k"
                                ],
                                "name": "model_name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "n": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "value": 1,
                                "password": false,
                                "name": "n",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "openai_api_base": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "openai_api_base",
                                "display_name": "OpenAI API Base",
                                "advanced": false,
                                "dynamic": false,
                                "info": "\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n",
                                "type": "str",
                                "list": false
                              },
                              "openai_api_key": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "",
                                "password": true,
                                "name": "openai_api_key",
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "openai_organization": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "openai_organization",
                                "display_name": "OpenAI Organization",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "openai_proxy": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "openai_proxy",
                                "display_name": "OpenAI Proxy",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "request_timeout": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "request_timeout",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "float",
                                "list": false
                              },
                              "streaming": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "streaming",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "tags": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "tags",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "temperature": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": 0.7,
                                "password": false,
                                "name": "temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "float",
                                "list": false
                              },
                              "tiktoken_model_name": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "tiktoken_model_name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "verbose": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "verbose",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "_type": "ChatOpenAI"
                            },
                            "description": "`OpenAI` Chat large language models API.",
                            "base_classes": [
                              "BaseChatModel",
                              "BaseLanguageModel",
                              "ChatOpenAI",
                              "BaseLLM"
                            ],
                            "display_name": "ChatOpenAI",
                            "custom_fields": {},
                            "output_types": [],
                            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/integrations/openai",
                            "beta": false,
                            "error": null
                          },
                          "id": "ChatOpenAI-UUprY"
                        },
                        "selected": true,
                        "dragging": false,
                        "positionAbsolute": {
                          "x": 880.5692501813826,
                          "y": 59.58244540558999
                        }
                      },
                      {
                        "width": 384,
                        "height": 339,
                        "id": "LLMChain-IUiMS",
                        "type": "genericNode",
                        "position": {
                          "x": 1421.622948027733,
                          "y": 75.44175267730185
                        },
                        "data": {
                          "type": "LLMChain",
                          "node": {
                            "template": {
                              "code": {
                                "dynamic": true,
                                "required": true,
                                "placeholder": "",
                                "show": false,
                                "multiline": true,
                                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "type": "code",
                                "list": false
                              },
                              "_type": "CustomComponent",
                              "llm": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "llm",
                                "display_name": "LLM",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseLanguageModel",
                                "list": false
                              },
                              "memory": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseMemory",
                                "list": false
                              },
                              "prompt": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "prompt",
                                "display_name": "Prompt",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BasePromptTemplate",
                                "list": false
                              }
                            },
                            "description": "Chain to run queries against LLMs",
                            "base_classes": [
                              "Chain",
                              "Callable"
                            ],
                            "display_name": "LLMChain",
                            "custom_fields": {
                              "llm": null,
                              "memory": null,
                              "prompt": null
                            },
                            "output_types": [
                              "LLMChain"
                            ],
                            "documentation": "",
                            "beta": true,
                            "error": null
                          },
                          "id": "LLMChain-IUiMS"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 1421.622948027733,
                          "y": 75.44175267730185
                        },
                        "dragging": false
                      }
                    ],
                    "edges": [
                      {
                        "source": "ChatOpenAI-UUprY",
                        "sourceHandle": "{œbaseClassesœ:[œBaseChatModelœ,œBaseLanguageModelœ,œChatOpenAIœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-UUprYœ}",
                        "target": "LLMChain-IUiMS",
                        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-IUiMSœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "llm",
                            "id": "LLMChain-IUiMS",
                            "inputTypes": null,
                            "type": "BaseLanguageModel"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "BaseChatModel",
                              "BaseLanguageModel",
                              "ChatOpenAI",
                              "BaseLLM"
                            ],
                            "dataType": "ChatOpenAI",
                            "id": "ChatOpenAI-UUprY"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-gray-900  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-ChatOpenAI-UUprY{œbaseClassesœ:[œBaseChatModelœ,œBaseLanguageModelœ,œChatOpenAIœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-UUprYœ}-LLMChain-IUiMS{œfieldNameœ:œllmœ,œidœ:œLLMChain-IUiMSœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
                        "selected": true
                      }
                    ],
                    "viewport": {
                      "x": 168.47352424578798,
                      "y": 172.82191343441917,
                      "zoom": 0.5403627010196765
                    }
                  },
                  "is_component": false,
                  "name": "Joyous Pasteur",
                  "description": "",
                  "id": "fYTxi"
                },
                "official": false
              },
              "id": "GroupNode-d8KdT"
            },
            "selected": false,
            "positionAbsolute": {
              "x": 1437.6059765336756,
              "y": 369.31672838558967
            },
            "dragging": false
          }
        ],
        "edges": [
          {
            "source": "UrlLoader-LYlvJ",
            "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œUrlLoaderœ,œidœ:œUrlLoader-LYlvJœ}",
            "target": "PromptTemplate-rpXBt",
            "targetHandle": "{œfieldNameœ:œarticle1œ,œidœ:œPromptTemplate-rpXBtœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "article1",
                "id": "PromptTemplate-rpXBt",
                "inputTypes": [
                  "Document",
                  "BaseOutputParser"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Document"
                ],
                "dataType": "UrlLoader",
                "id": "UrlLoader-LYlvJ"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-UrlLoader-LYlvJ{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œUrlLoaderœ,œidœ:œUrlLoader-LYlvJœ}-PromptTemplate-rpXBt{œfieldNameœ:œarticle1œ,œidœ:œPromptTemplate-rpXBtœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
          },
          {
            "source": "UrlLoader-AFwPy",
            "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œUrlLoaderœ,œidœ:œUrlLoader-AFwPyœ}",
            "target": "PromptTemplate-rpXBt",
            "targetHandle": "{œfieldNameœ:œarticle2œ,œidœ:œPromptTemplate-rpXBtœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "article2",
                "id": "PromptTemplate-rpXBt",
                "inputTypes": [
                  "Document",
                  "BaseOutputParser"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Document"
                ],
                "dataType": "UrlLoader",
                "id": "UrlLoader-AFwPy"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-UrlLoader-AFwPy{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œUrlLoaderœ,œidœ:œUrlLoader-AFwPyœ}-PromptTemplate-rpXBt{œfieldNameœ:œarticle2œ,œidœ:œPromptTemplate-rpXBtœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
          },
          {
            "source": "PromptTemplate-rpXBt",
            "sourceHandle": "{œbaseClassesœ:[œStringPromptTemplateœ,œBasePromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-rpXBtœ}",
            "target": "GroupNode-d8KdT",
            "targetHandle": "{œfieldNameœ:œprompt_LLMChain-IUiMSœ,œidœ:œGroupNode-d8KdTœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œpromptœ,œidœ:œLLMChain-IUiMSœ},œtypeœ:œBasePromptTemplateœ}",
            "data": {
              "targetHandle": {
                "fieldName": "prompt_LLMChain-IUiMS",
                "id": "GroupNode-d8KdT",
                "inputTypes": null,
                "proxy": {
                  "field": "prompt",
                  "id": "LLMChain-IUiMS"
                },
                "type": "BasePromptTemplate"
              },
              "sourceHandle": {
                "baseClasses": [
                  "StringPromptTemplate",
                  "BasePromptTemplate",
                  "PromptTemplate"
                ],
                "dataType": "PromptTemplate",
                "id": "PromptTemplate-rpXBt"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PromptTemplate-rpXBt{œbaseClassesœ:[œStringPromptTemplateœ,œBasePromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-rpXBtœ}-GroupNode-d8KdT{œfieldNameœ:œprompt_LLMChain-IUiMSœ,œidœ:œGroupNode-d8KdTœ,œinputTypesœ:null,œproxyœ:{œfieldœ:œpromptœ,œidœ:œLLMChain-IUiMSœ},œtypeœ:œBasePromptTemplateœ}"
          }
        ],
        "viewport": {
          "x": 31.364114018328337,
          "y": 37.42831821818865,
          "zoom": 0.8538177014905624
        }
      },
      "is_component": false,
      "updated_at": "2024-05-06T12:29:45.098288",
      "folder": null,
      "id": "ba3419fd-8dac-4788-9d36-eede7755011d",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "Basic RAG",
      "description": "Simple QA using Chroma vector store.",
      "data": {
        "edges": [],
        "nodes": [
          {
            "data": {
              "id": "GroupNode-zKRvg",
              "type": "RetrievalQA",
              "node": {
                "output_types": [],
                "display_name": "Basic RAG",
                "documentation": "",
                "base_classes": [
                  "BaseRetrievalQA",
                  "RetrievalQA",
                  "Chain",
                  "Callable"
                ],
                "description": "double click to edit description",
                "template": {
                  "callbacks_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "callbacks",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                    "list": true,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "callbacks"
                    },
                    "display_name": "Callbacks"
                  },
                  "memory_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BaseMemory",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "memory"
                    },
                    "display_name": "Memory"
                  },
                  "input_key_RetrievalQA-Hhe38": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "query",
                    "password": false,
                    "name": "input_key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "input_key"
                    },
                    "display_name": "Input Key"
                  },
                  "metadata_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "metadata",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "dict",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "metadata"
                    },
                    "display_name": "Metadata"
                  },
                  "output_key_RetrievalQA-Hhe38": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "result",
                    "password": false,
                    "name": "output_key",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "output_key"
                    },
                    "display_name": "Output Key"
                  },
                  "return_source_documents_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": true,
                    "password": false,
                    "name": "return_source_documents",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "return_source_documents"
                    },
                    "display_name": "Return Source Documents"
                  },
                  "tags_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "tags",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "tags"
                    },
                    "display_name": "Tags"
                  },
                  "verbose_RetrievalQA-Hhe38": {
                    "required": false,
                    "placeholder": "",
                    "show": false,
                    "multiline": false,
                    "password": false,
                    "name": "verbose",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "RetrievalQA-Hhe38",
                      "field": "verbose"
                    },
                    "display_name": "Verbose"
                  },
                  "code_Chroma-dUHtN": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from typing import Optional, Union\nfrom langflow import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "code"
                    },
                    "display_name": "Code"
                  },
                  "chroma_server_cors_allow_origins_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_cors_allow_origins",
                    "display_name": "Server CORS Allow Origins",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_cors_allow_origins"
                    }
                  },
                  "chroma_server_grpc_port_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_grpc_port",
                    "display_name": "Server gRPC Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_grpc_port"
                    }
                  },
                  "chroma_server_host_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_host",
                    "display_name": "Server Host",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_host"
                    }
                  },
                  "chroma_server_port_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "chroma_server_port",
                    "display_name": "Server Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_port"
                    }
                  },
                  "chroma_server_ssl_enabled_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "chroma_server_ssl_enabled",
                    "display_name": "Server SSL Enabled",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "chroma_server_ssl_enabled"
                    }
                  },
                  "collection_name_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "langflow",
                    "password": false,
                    "name": "collection_name",
                    "display_name": "Collection Name",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "collection_name"
                    }
                  },
                  "embedding_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "embedding",
                    "display_name": "Embedding",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "Embeddings",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "embedding"
                    }
                  },
                  "persist_Chroma-dUHtN": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "password": false,
                    "name": "persist",
                    "display_name": "Persist",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "bool",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "persist"
                    }
                  },
                  "persist_directory_Chroma-dUHtN": {
                    "required": false,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "persist_directory",
                    "display_name": "Persist Directory",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "Chroma-dUHtN",
                      "field": "persist_directory"
                    }
                  },
                  "llm_CombineDocsChain-ZlGNS": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "BaseLanguageModel",
                    "list": false,
                    "proxy": {
                      "id": "CombineDocsChain-ZlGNS",
                      "field": "llm"
                    }
                  },
                  "chain_type_CombineDocsChain-ZlGNS": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "stuff",
                    "password": false,
                    "options": [
                      "stuff",
                      "map_reduce",
                      "map_rerank",
                      "refine"
                    ],
                    "name": "chain_type",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "CombineDocsChain-ZlGNS",
                      "field": "chain_type"
                    },
                    "display_name": "Chain Type"
                  },
                  "code_CustomComponent-715vY": {
                    "dynamic": true,
                    "required": true,
                    "placeholder": "",
                    "show": false,
                    "multiline": true,
                    "value": "from langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "type": "code",
                    "list": false,
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "code"
                    },
                    "display_name": "Code"
                  },
                  "file_path_CustomComponent-715vY": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "password": false,
                    "name": "file_path",
                    "display_name": "File Path",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "type": "file",
                    "list": false,
                    "fileTypes": [
                      "json",
                      "txt",
                      "csv",
                      "jsonl",
                      "html",
                      "htm",
                      "conllu",
                      "enex",
                      "msg",
                      "pdf",
                      "srt",
                      "eml",
                      "md",
                      "pptx",
                      "docx"
                    ],
                    "file_path": "/Users/rodrigonader/Library/Caches/langflow/f2b1ae44-3df4-4b22-9153-99e7d8abb51c/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                    "value": "",
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "file_path"
                    }
                  },
                  "loader_CustomComponent-715vY": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": "Automatic",
                    "password": false,
                    "options": [
                      "Automatic",
                      "Airbyte JSON (.jsonl)",
                      "JSON (.json)",
                      "BeautifulSoup4 HTML (.html, .htm)",
                      "CSV (.csv)",
                      "CoNLL-U (.conllu)",
                      "EverNote (.enex)",
                      "Facebook Chat (.json)",
                      "Outlook Message (.msg)",
                      "PyPDF (.pdf)",
                      "Subtitle (.str)",
                      "Text (.txt)",
                      "Unstructured Email (.eml)",
                      "Unstructured HTML (.html, .htm)",
                      "Unstructured Markdown (.md)",
                      "Unstructured PowerPoint (.pptx)",
                      "Unstructured Word (.docx)"
                    ],
                    "name": "loader",
                    "display_name": "Loader",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": true,
                    "proxy": {
                      "id": "CustomComponent-715vY",
                      "field": "loader"
                    }
                  },
                  "chunk_overlap_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": 200,
                    "password": false,
                    "name": "chunk_overlap",
                    "display_name": "Chunk Overlap",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "chunk_overlap"
                    }
                  },
                  "chunk_size_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": 1000,
                    "password": false,
                    "name": "chunk_size",
                    "display_name": "Chunk Size",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "int",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "chunk_size"
                    }
                  },
                  "separator_CharacterTextSplitter-PaUem": {
                    "required": true,
                    "placeholder": "",
                    "show": true,
                    "multiline": false,
                    "value": " ",
                    "password": false,
                    "name": "separator",
                    "display_name": "Separator",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "type": "str",
                    "list": false,
                    "proxy": {
                      "id": "CharacterTextSplitter-PaUem",
                      "field": "separator"
                    }
                  }
                },
                "flow": {
                  "data": {
                    "nodes": [
                      {
                        "width": 384,
                        "height": 339,
                        "id": "RetrievalQA-Hhe38",
                        "type": "genericNode",
                        "position": {
                          "x": 786.0148744080102,
                          "y": 224.0922500095482
                        },
                        "data": {
                          "type": "RetrievalQA",
                          "node": {
                            "template": {
                              "callbacks": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "callbacks",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "langchain_core.callbacks.base.BaseCallbackHandler",
                                "list": true
                              },
                              "combine_documents_chain": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "combine_documents_chain",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseCombineDocumentsChain",
                                "list": false
                              },
                              "memory": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "memory",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseMemory",
                                "list": false
                              },
                              "retriever": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "retriever",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseRetriever",
                                "list": false
                              },
                              "input_key": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "query",
                                "password": false,
                                "name": "input_key",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "metadata": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "metadata",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "dict",
                                "list": false
                              },
                              "output_key": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "result",
                                "password": false,
                                "name": "output_key",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "return_source_documents": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": true,
                                "password": false,
                                "name": "return_source_documents",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "tags": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "tags",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "verbose": {
                                "required": false,
                                "placeholder": "",
                                "show": false,
                                "multiline": false,
                                "password": false,
                                "name": "verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "_type": "RetrievalQA"
                            },
                            "description": "Chain for question-answering against an index.",
                            "base_classes": [
                              "BaseRetrievalQA",
                              "RetrievalQA",
                              "Chain",
                              "Callable"
                            ],
                            "display_name": "RetrievalQA",
                            "custom_fields": {},
                            "output_types": [],
                            "documentation": "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa",
                            "beta": false,
                            "error": null
                          },
                          "id": "RetrievalQA-Hhe38"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 786.0148744080102,
                          "y": 224.0922500095482
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 539,
                        "id": "Chroma-dUHtN",
                        "type": "genericNode",
                        "position": {
                          "x": 233.28825393386717,
                          "y": 329.51112502864464
                        },
                        "data": {
                          "type": "Chroma",
                          "node": {
                            "template": {
                              "code": {
                                "dynamic": true,
                                "required": true,
                                "placeholder": "",
                                "show": false,
                                "multiline": true,
                                "value": "from typing import Optional, Union\nfrom langflow import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "type": "code",
                                "list": false
                              },
                              "_type": "CustomComponent",
                              "chroma_server_cors_allow_origins": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_cors_allow_origins",
                                "display_name": "Server CORS Allow Origins",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "chroma_server_grpc_port": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_grpc_port",
                                "display_name": "Server gRPC Port",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chroma_server_host": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_host",
                                "display_name": "Server Host",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "chroma_server_port": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "chroma_server_port",
                                "display_name": "Server Port",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chroma_server_ssl_enabled": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "chroma_server_ssl_enabled",
                                "display_name": "Server SSL Enabled",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "collection_name": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "langflow",
                                "password": false,
                                "name": "collection_name",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "documents": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "documents",
                                "display_name": "Documents",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Document",
                                "list": true
                              },
                              "embedding": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "embedding",
                                "display_name": "Embedding",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Embeddings",
                                "list": false
                              },
                              "persist": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": false,
                                "password": false,
                                "name": "persist",
                                "display_name": "Persist",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "bool",
                                "list": false
                              },
                              "persist_directory": {
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "persist_directory",
                                "display_name": "Persist Directory",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              }
                            },
                            "description": "Implementation of Vector Store using Chroma",
                            "base_classes": [
                              "VectorStore",
                              "BaseRetriever"
                            ],
                            "display_name": "Chroma",
                            "custom_fields": {
                              "chroma_server_cors_allow_origins": null,
                              "chroma_server_grpc_port": null,
                              "chroma_server_host": null,
                              "chroma_server_port": null,
                              "chroma_server_ssl_enabled": null,
                              "collection_name": null,
                              "documents": null,
                              "embedding": null,
                              "persist": null,
                              "persist_directory": null
                            },
                            "output_types": [
                              "Chroma"
                            ],
                            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                            "beta": true,
                            "error": null
                          },
                          "id": "Chroma-dUHtN"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 233.28825393386717,
                          "y": 329.51112502864464
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 333,
                        "id": "CombineDocsChain-ZlGNS",
                        "type": "genericNode",
                        "position": {
                          "x": 218.59271730686442,
                          "y": -167.93319837803648
                        },
                        "data": {
                          "type": "CombineDocsChain",
                          "node": {
                            "template": {
                              "llm": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "llm",
                                "display_name": "LLM",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "BaseLanguageModel",
                                "list": false
                              },
                              "chain_type": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "stuff",
                                "password": false,
                                "options": [
                                  "stuff",
                                  "map_reduce",
                                  "map_rerank",
                                  "refine"
                                ],
                                "name": "chain_type",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              },
                              "_type": "load_qa_chain"
                            },
                            "description": "Load question answering chain.",
                            "base_classes": [
                              "BaseCombineDocumentsChain",
                              "Callable"
                            ],
                            "display_name": "CombineDocsChain",
                            "custom_fields": {},
                            "output_types": [],
                            "documentation": "",
                            "beta": false,
                            "error": null
                          },
                          "id": "CombineDocsChain-ZlGNS"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": 218.59271730686442,
                          "y": -167.93319837803648
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 457,
                        "id": "CustomComponent-715vY",
                        "type": "genericNode",
                        "position": {
                          "x": -947.6155160488396,
                          "y": 293.1413507229215
                        },
                        "data": {
                          "type": "CustomComponent",
                          "node": {
                            "template": {
                              "code": {
                                "dynamic": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": true,
                                "value": "from langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result",
                                "password": false,
                                "name": "code",
                                "advanced": false,
                                "type": "code",
                                "list": false
                              },
                              "_type": "CustomComponent",
                              "file_path": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "file_path",
                                "display_name": "File Path",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "file",
                                "list": false,
                                "fileTypes": [
                                  "json",
                                  "txt",
                                  "csv",
                                  "jsonl",
                                  "html",
                                  "htm",
                                  "conllu",
                                  "enex",
                                  "msg",
                                  "pdf",
                                  "srt",
                                  "eml",
                                  "md",
                                  "pptx",
                                  "docx"
                                ],
                                "file_path": "/Users/rodrigonader/Library/Caches/langflow/13ca1b26-ed4a-457b-8e00-eab94d5448dc/43d1a14988d3f1f86b343a0aa7ea8fe84cb23fbecdbba2a3897135bcc8822d52.pdf",
                                "value": ""
                              },
                              "loader": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": "Automatic",
                                "password": false,
                                "options": [
                                  "Automatic",
                                  "Airbyte JSON (.jsonl)",
                                  "JSON (.json)",
                                  "BeautifulSoup4 HTML (.html, .htm)",
                                  "CSV (.csv)",
                                  "CoNLL-U (.conllu)",
                                  "EverNote (.enex)",
                                  "Facebook Chat (.json)",
                                  "Outlook Message (.msg)",
                                  "PyPDF (.pdf)",
                                  "Subtitle (.str)",
                                  "Text (.txt)",
                                  "Unstructured Email (.eml)",
                                  "Unstructured HTML (.html, .htm)",
                                  "Unstructured Markdown (.md)",
                                  "Unstructured PowerPoint (.pptx)",
                                  "Unstructured Word (.docx)"
                                ],
                                "name": "loader",
                                "display_name": "Loader",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": true
                              }
                            },
                            "description": "A generic loader that auto-detects file types.",
                            "base_classes": [
                              "Document"
                            ],
                            "display_name": "File Loader",
                            "custom_fields": {
                              "file_path": null,
                              "loader": null
                            },
                            "output_types": [
                              "Document"
                            ],
                            "documentation": "",
                            "beta": true,
                            "error": null,
                            "official": false
                          },
                          "id": "CustomComponent-715vY"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": -947.6155160488396,
                          "y": 293.1413507229215
                        },
                        "dragging": false
                      },
                      {
                        "width": 384,
                        "height": 501,
                        "id": "CharacterTextSplitter-PaUem",
                        "type": "genericNode",
                        "position": {
                          "x": -314.0779657410157,
                          "y": 23.837018963891467
                        },
                        "data": {
                          "type": "CharacterTextSplitter",
                          "node": {
                            "template": {
                              "documents": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "password": false,
                                "name": "documents",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "Document",
                                "list": true
                              },
                              "chunk_overlap": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": 200,
                                "password": false,
                                "name": "chunk_overlap",
                                "display_name": "Chunk Overlap",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "chunk_size": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": 1000,
                                "password": false,
                                "name": "chunk_size",
                                "display_name": "Chunk Size",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "int",
                                "list": false
                              },
                              "separator": {
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "multiline": false,
                                "value": " ",
                                "password": false,
                                "name": "separator",
                                "display_name": "Separator",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "type": "str",
                                "list": false
                              },
                              "_type": "CharacterTextSplitter"
                            },
                            "description": "Splitting text that looks at characters.",
                            "base_classes": [
                              "Document"
                            ],
                            "display_name": "CharacterTextSplitter",
                            "custom_fields": {},
                            "output_types": [
                              "Document"
                            ],
                            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
                            "beta": false,
                            "error": null
                          },
                          "id": "CharacterTextSplitter-PaUem"
                        },
                        "selected": true,
                        "positionAbsolute": {
                          "x": -314.0779657410157,
                          "y": 23.837018963891467
                        },
                        "dragging": false
                      }
                    ],
                    "edges": [
                      {
                        "source": "Chroma-dUHtN",
                        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}",
                        "target": "RetrievalQA-Hhe38",
                        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "retriever",
                            "id": "RetrievalQA-Hhe38",
                            "inputTypes": null,
                            "type": "BaseRetriever"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "VectorStore",
                              "BaseRetriever"
                            ],
                            "dataType": "Chroma",
                            "id": "Chroma-dUHtN"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-Chroma-dUHtN{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-dUHtNœ}-RetrievalQA-Hhe38{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
                        "selected": true
                      },
                      {
                        "source": "CombineDocsChain-ZlGNS",
                        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}",
                        "target": "RetrievalQA-Hhe38",
                        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "combine_documents_chain",
                            "id": "RetrievalQA-Hhe38",
                            "inputTypes": null,
                            "type": "BaseCombineDocumentsChain"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "BaseCombineDocumentsChain",
                              "Callable"
                            ],
                            "dataType": "CombineDocsChain",
                            "id": "CombineDocsChain-ZlGNS"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CombineDocsChain-ZlGNS{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ZlGNSœ}-RetrievalQA-Hhe38{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-Hhe38œ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
                        "selected": true
                      },
                      {
                        "source": "CustomComponent-715vY",
                        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}",
                        "target": "CharacterTextSplitter-PaUem",
                        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "documents",
                            "id": "CharacterTextSplitter-PaUem",
                            "inputTypes": null,
                            "type": "Document"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "Document"
                            ],
                            "dataType": "CustomComponent",
                            "id": "CustomComponent-715vY"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CustomComponent-715vY{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-715vYœ}-CharacterTextSplitter-PaUem{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-PaUemœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "selected": true
                      },
                      {
                        "source": "CharacterTextSplitter-PaUem",
                        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}",
                        "target": "Chroma-dUHtN",
                        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "data": {
                          "targetHandle": {
                            "fieldName": "documents",
                            "id": "Chroma-dUHtN",
                            "inputTypes": null,
                            "type": "Document"
                          },
                          "sourceHandle": {
                            "baseClasses": [
                              "Document"
                            ],
                            "dataType": "CharacterTextSplitter",
                            "id": "CharacterTextSplitter-PaUem"
                          }
                        },
                        "style": {
                          "stroke": "#555"
                        },
                        "className": "stroke-foreground  stroke-connection",
                        "animated": false,
                        "id": "reactflow__edge-CharacterTextSplitter-PaUem{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-PaUemœ}-Chroma-dUHtN{œfieldNameœ:œdocumentsœ,œidœ:œChroma-dUHtNœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
                        "selected": true
                      }
                    ],
                    "viewport": {
                      "x": 577.3649569565561,
                      "y": 227.84214213787357,
                      "zoom": 0.48903173672367245
                    }
                  },
                  "is_component": false,
                  "name": "Silly Poitras",
                  "description": "",
                  "id": "F7KdT"
                },
                "official": false
              }
            },
            "id": "GroupNode-zKRvg",
            "position": {
              "x": 0,
              "y": 0
            },
            "type": "genericNode"
          }
        ],
        "viewport": {
          "x": 1,
          "y": 1,
          "zoom": 1
        }
      },
      "is_component": true,
      "updated_at": "2024-05-06T12:27:20.390786",
      "folder": null,
      "id": "f0cf8938-adc9-4c6f-878b-c5ac4db3f089",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "RAG Based LLM",
      "description": "RAG Based LLM using URL",
      "data": {
        "nodes": [
          {
            "id": "ChatInput-S8dAB",
            "type": "genericNode",
            "position": {
              "x": 335.0733674983719,
              "y": -262.2712706729676
            },
            "data": {
              "type": "ChatInput",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "input_value": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_value",
                    "display_name": "Message",
                    "advanced": false,
                    "input_types": [],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "value": "Have I askek u anything yet?"
                  },
                  "return_record": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "return_record",
                    "display_name": "Return Record",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "sender": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "User",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Machine",
                      "User"
                    ],
                    "name": "sender",
                    "display_name": "Sender Type",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "sender_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "sender_name",
                    "display_name": "Sender Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "session_id": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "session_id",
                    "display_name": "Session ID",
                    "advanced": true,
                    "dynamic": false,
                    "info": "If provided, the message will be stored in the memory.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Get chat inputs from the Interaction Panel.",
                "icon": "ChatInput",
                "base_classes": [
                  "object",
                  "Record",
                  "str",
                  "Text"
                ],
                "display_name": "Chat Input",
                "documentation": "",
                "custom_fields": {
                  "sender": null,
                  "sender_name": null,
                  "input_value": null,
                  "session_id": null,
                  "return_record": null
                },
                "output_types": [
                  "Text",
                  "Record"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "ChatInput-S8dAB"
            },
            "selected": false,
            "width": 384,
            "height": 391,
            "positionAbsolute": {
              "x": 335.0733674983719,
              "y": -262.2712706729676
            },
            "dragging": false
          },
          {
            "id": "Prompt-6Db2d",
            "type": "genericNode",
            "position": {
              "x": 847.3889604388662,
              "y": -779.1972972610477
            },
            "data": {
              "type": "Prompt",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from langchain_core.prompts import PromptTemplate\n\nfrom langflow.field_typing import Prompt, TemplateField, Text\nfrom langflow.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from langflow.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "template": {
                    "type": "prompt",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "Kindly provide a response to the user's inquiry, adhering to the provided context and message history. Please ensure the following rules are followed:\n\nAvoid repetition of information already stated in the context or message history.\nMaintain clarity and conciseness in your response.\nEnsure relevance to the user's question.\n\nContext: {context}\n\nMessage History:\n{history}\n\nUser's Question: {question}",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "template",
                    "display_name": "Template",
                    "advanced": false,
                    "input_types": [
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "_type": "CustomComponent",
                  "context": {
                    "field_type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "context",
                    "display_name": "context",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser",
                      "Record",
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "type": "str"
                  },
                  "history": {
                    "field_type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "history",
                    "display_name": "history",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser",
                      "Record",
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "type": "str"
                  },
                  "question": {
                    "field_type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "question",
                    "display_name": "question",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser",
                      "Record",
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "type": "str"
                  }
                },
                "description": "Create a prompt template with dynamic variables.",
                "icon": "prompts",
                "is_input": null,
                "is_output": null,
                "is_composition": null,
                "base_classes": [
                  "object",
                  "str",
                  "Text"
                ],
                "name": "",
                "display_name": "Prompt",
                "documentation": "",
                "custom_fields": {
                  "template": [
                    "context",
                    "history",
                    "question"
                  ]
                },
                "output_types": [
                  "Text"
                ],
                "full_path": null,
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false,
                "error": null
              },
              "id": "Prompt-6Db2d",
              "description": "Create a prompt template with dynamic variables.",
              "display_name": "Prompt"
            },
            "selected": false,
            "width": 384,
            "height": 571,
            "positionAbsolute": {
              "x": 847.3889604388662,
              "y": -779.1972972610477
            },
            "dragging": false
          },
          {
            "id": "TextInput-Ywk6X",
            "type": "genericNode",
            "position": {
              "x": -160.66530725968983,
              "y": -679.1319866108203
            },
            "data": {
              "type": "TextInput",
              "node": {
                "template": {
                  "input_value": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "carlos",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_value",
                    "display_name": "Value",
                    "advanced": false,
                    "input_types": [
                      "Record",
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "Text or Record to be passed as input.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "record_template": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "record_template",
                    "display_name": "Record Template",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Get text inputs from the Interaction Panel.",
                "icon": "type",
                "base_classes": [
                  "object",
                  "str",
                  "Text"
                ],
                "display_name": "Name",
                "documentation": "",
                "custom_fields": {
                  "input_value": null,
                  "record_template": null
                },
                "output_types": [
                  "Text"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "TextInput-Ywk6X"
            },
            "selected": false,
            "width": 384,
            "height": 297,
            "positionAbsolute": {
              "x": -160.66530725968983,
              "y": -679.1319866108203
            },
            "dragging": false
          },
          {
            "id": "MemoryComponent-4Q88f",
            "type": "genericNode",
            "position": {
              "x": 323.9614483591838,
              "y": -811.6596605417424
            },
            "data": {
              "type": "MemoryComponent",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional\n\nfrom langflow.field_typing import Text\nfrom langflow.helpers.record import records_to_text\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.memory import get_messages\n\n\nclass MemoryComponent(CustomComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        order = \"DESC\" if order == \"Descending\" else \"ASC\"\n        if sender == \"Machine and User\":\n            sender = None\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "n_messages": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 5,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "n_messages",
                    "display_name": "Number of Messages",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Number of messages to retrieve.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "order": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Descending",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Ascending",
                      "Descending"
                    ],
                    "name": "order",
                    "display_name": "Order",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Order of the messages.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "record_template": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "{sender_name}: {text}",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "record_template",
                    "display_name": "Record Template",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "sender": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Machine and User",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Machine",
                      "User",
                      "Machine and User"
                    ],
                    "name": "sender",
                    "display_name": "Sender Type",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "sender_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "sender_name",
                    "display_name": "Sender Name",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "session_id": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "session_id",
                    "display_name": "Session ID",
                    "advanced": false,
                    "input_types": [
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "Session ID of the chat history.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "_type": "CustomComponent"
                },
                "description": "Retrieves stored chat messages given a specific Session ID.",
                "icon": "history",
                "base_classes": [
                  "object",
                  "str",
                  "Text"
                ],
                "display_name": "Chat Memory",
                "documentation": "",
                "custom_fields": {
                  "sender": null,
                  "sender_name": null,
                  "session_id": null,
                  "n_messages": null,
                  "order": null,
                  "record_template": null
                },
                "output_types": [
                  "Text"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": true
              },
              "id": "MemoryComponent-4Q88f"
            },
            "selected": false,
            "width": 384,
            "height": 501,
            "positionAbsolute": {
              "x": 323.9614483591838,
              "y": -811.6596605417424
            },
            "dragging": false
          },
          {
            "id": "OpenAIModel-56j5U",
            "type": "genericNode",
            "position": {
              "x": 1390.518706934813,
              "y": -767.7373848648547
            },
            "data": {
              "type": "OpenAIModel",
              "node": {
                "template": {
                  "input_value": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_value",
                    "display_name": "Input",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": [\n                    \"gpt-4-turbo-2024-04-09\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n                \"value\": \"gpt-4-turbo-preview\",\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "max_tokens": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 256,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_tokens",
                    "display_name": "Max Tokens",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "model_name": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "gpt-3.5-turbo-1106",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "gpt-4-turbo-2024-04-09",
                      "gpt-4-turbo-preview",
                      "gpt-3.5-turbo",
                      "gpt-4-0125-preview",
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-3.5-turbo-0125",
                      "gpt-3.5-turbo-1106"
                    ],
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": true,
                    "dynamic": false,
                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The OpenAI API Key to use for the OpenAI model.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": ""
                  },
                  "stream": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "stream",
                    "display_name": "Stream",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Stream the response from the model. Streaming works only in Chat.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "system_message": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "system_message",
                    "display_name": "System Message",
                    "advanced": true,
                    "dynamic": false,
                    "info": "System message to pass to the model.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "temperature": {
                    "type": "float",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 0.1,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "step_type": "float",
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "load_from_db": false,
                    "title_case": false
                  },
                  "_type": "CustomComponent"
                },
                "description": "Generates text using OpenAI LLMs.",
                "icon": "OpenAI",
                "base_classes": [
                  "object",
                  "str",
                  "Text"
                ],
                "display_name": "OpenAI",
                "documentation": "",
                "custom_fields": {
                  "input_value": null,
                  "openai_api_key": null,
                  "temperature": null,
                  "model_name": null,
                  "max_tokens": null,
                  "model_kwargs": null,
                  "openai_api_base": null,
                  "stream": null,
                  "system_message": null
                },
                "output_types": [
                  "Text"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [
                  "max_tokens",
                  "model_kwargs",
                  "model_name",
                  "openai_api_base",
                  "openai_api_key",
                  "temperature",
                  "input_value",
                  "system_message",
                  "stream"
                ],
                "beta": false
              },
              "id": "OpenAIModel-56j5U"
            },
            "selected": false,
            "width": 384,
            "height": 583,
            "positionAbsolute": {
              "x": 1390.518706934813,
              "y": -767.7373848648547
            },
            "dragging": false
          },
          {
            "id": "ChatOutput-osPj0",
            "type": "genericNode",
            "position": {
              "x": 1963.8094926172228,
              "y": -659.456240265965
            },
            "data": {
              "type": "ChatOutput",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Interaction Panel.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "input_value": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_value",
                    "display_name": "Message",
                    "advanced": false,
                    "input_types": [
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "record_template": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "{text}",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "record_template",
                    "display_name": "Record Template",
                    "advanced": true,
                    "dynamic": false,
                    "info": "In case of Message being a Record, this template will be used to convert it to text.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "return_record": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "return_record",
                    "display_name": "Return Record",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "sender": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Machine",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Machine",
                      "User"
                    ],
                    "name": "sender",
                    "display_name": "Sender Type",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "sender_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "AI",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "sender_name",
                    "display_name": "Sender Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "session_id": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "session_id",
                    "display_name": "Session ID",
                    "advanced": true,
                    "dynamic": false,
                    "info": "If provided, the message will be stored in the memory.",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Display a chat message in the Interaction Panel.",
                "icon": "ChatOutput",
                "base_classes": [
                  "object",
                  "Record",
                  "str",
                  "Text"
                ],
                "display_name": "Chat Output",
                "documentation": "",
                "custom_fields": {
                  "sender": null,
                  "sender_name": null,
                  "input_value": null,
                  "session_id": null,
                  "return_record": null,
                  "record_template": null
                },
                "output_types": [
                  "Text",
                  "Record"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "ChatOutput-osPj0"
            },
            "selected": false,
            "width": 384,
            "height": 391,
            "positionAbsolute": {
              "x": 1963.8094926172228,
              "y": -659.456240265965
            },
            "dragging": false
          },
          {
            "id": "URL-WCRPW",
            "type": "genericNode",
            "position": {
              "x": -587.6222048428742,
              "y": -179.42033164491514
            },
            "data": {
              "type": "URL",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=urls)\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "urls": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "urls",
                    "display_name": "URL",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": [
                      "https://www.nextplatform.com/2024/04/22/metas-llama-3-ai-is-smart-but-who-is-going-to-profit-from-it/",
                      ""
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Fetch content from one or more URLs.",
                "icon": "layout-template",
                "base_classes": [
                  "Record"
                ],
                "display_name": "URL",
                "documentation": "",
                "custom_fields": {
                  "urls": null
                },
                "output_types": [
                  "Record"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "URL-WCRPW"
            },
            "selected": false,
            "width": 384,
            "height": 339,
            "positionAbsolute": {
              "x": -587.6222048428742,
              "y": -179.42033164491514
            },
            "dragging": false
          },
          {
            "id": "Chroma-mi4XC",
            "type": "genericNode",
            "position": {
              "x": 739.4570767123298,
              "y": 900.3843830952608
            },
            "data": {
              "type": "Chroma",
              "node": {
                "template": {
                  "embedding": {
                    "type": "Embeddings",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "embedding",
                    "display_name": "Embedding",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "inputs": {
                    "type": "Record",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "inputs",
                    "display_name": "Input",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "Record"
                    ],
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chroma_server_cors_allow_origins": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_cors_allow_origins",
                    "display_name": "Server CORS Allow Origins",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chroma_server_grpc_port": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_grpc_port",
                    "display_name": "Server gRPC Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chroma_server_host": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_host",
                    "display_name": "Server Host",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chroma_server_port": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_port",
                    "display_name": "Server Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chroma_server_ssl_enabled": {
                    "type": "bool",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_ssl_enabled",
                    "display_name": "Server SSL Enabled",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\n\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema.schema import Record\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    icon = \"Chroma\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"index_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        index_directory: Optional[str] = None,\n        inputs: Optional[List[Record]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - index_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n\n        # Check index_directory and expand it if it is a relative path\n        if index_directory is not None:\n            index_directory = self.resolve_path(index_directory)\n\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            chroma = Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=index_directory,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n        else:\n            chroma = Chroma(\n                persist_directory=index_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n            )\n        return chroma\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "collection_name": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "langflow",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "collection_name",
                    "display_name": "Collection Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "index_directory": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "index_directory",
                    "display_name": "Persist Directory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Implementation of Vector Store using Chroma",
                "icon": "Chroma",
                "base_classes": [
                  "BaseRetriever",
                  "Generic",
                  "object",
                  "Runnable",
                  "RunnableSerializable",
                  "Serializable",
                  "VectorStore"
                ],
                "display_name": "Chroma",
                "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                "custom_fields": {
                  "collection_name": null,
                  "embedding": null,
                  "chroma_server_ssl_enabled": null,
                  "index_directory": null,
                  "inputs": null,
                  "chroma_server_cors_allow_origins": null,
                  "chroma_server_host": null,
                  "chroma_server_port": null,
                  "chroma_server_grpc_port": null
                },
                "output_types": [
                  "VectorStore",
                  "BaseRetriever"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "Chroma-mi4XC"
            },
            "selected": false,
            "width": 384,
            "height": 495,
            "positionAbsolute": {
              "x": 739.4570767123298,
              "y": 900.3843830952608
            },
            "dragging": false
          },
          {
            "id": "OpenAIEmbeddings-pgEJV",
            "type": "genericNode",
            "position": {
              "x": -309.1318864451977,
              "y": 996.0297299275702
            },
            "data": {
              "type": "OpenAIEmbeddings",
              "node": {
                "template": {
                  "allowed_special": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": [],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "allowed_special",
                    "display_name": "Allowed Special",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chunk_size": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 1000,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chunk_size",
                    "display_name": "Chunk Size",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "client": {
                    "type": "Any",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "client",
                    "display_name": "Client",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Any, Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.field_typing import Embeddings, NestedDict\nfrom langflow.interface.custom.custom_component import CustomComponent\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "default_headers": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "default_headers",
                    "display_name": "Default Headers",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "default_query": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "default_query",
                    "display_name": "Default Query",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "deployment": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "text-embedding-ada-002",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "deployment",
                    "display_name": "Deployment",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "disallowed_special": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": [
                      "all"
                    ],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "disallowed_special",
                    "display_name": "Disallowed Special",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "embedding_ctx_length": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 8191,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "embedding_ctx_length",
                    "display_name": "Embedding Context Length",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "max_retries": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 6,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_retries",
                    "display_name": "Max Retries",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "model": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "text-embedding-ada-002",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "text-embedding-3-small",
                      "text-embedding-3-large",
                      "text-embedding-ada-002"
                    ],
                    "name": "model",
                    "display_name": "Model",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": ""
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": ""
                  },
                  "openai_api_type": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_type",
                    "display_name": "OpenAI API Type",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": ""
                  },
                  "openai_api_version": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_version",
                    "display_name": "OpenAI API Version",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "openai_organization": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_organization",
                    "display_name": "OpenAI Organization",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "openai_proxy": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_proxy",
                    "display_name": "OpenAI Proxy",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "request_timeout": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "request_timeout",
                    "display_name": "Request Timeout",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "step_type": "float",
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "load_from_db": false,
                    "title_case": false
                  },
                  "show_progress_bar": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "show_progress_bar",
                    "display_name": "Show Progress Bar",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "skip_empty": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "skip_empty",
                    "display_name": "Skip Empty",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "tiktoken_enable": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": true,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tiktoken_enable",
                    "display_name": "TikToken Enable",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "tiktoken_model_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tiktoken_model_name",
                    "display_name": "TikToken Model Name",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Generate embeddings using OpenAI models.",
                "base_classes": [
                  "Embeddings"
                ],
                "display_name": "OpenAI Embeddings",
                "documentation": "",
                "custom_fields": {
                  "openai_api_key": null,
                  "default_headers": null,
                  "default_query": null,
                  "allowed_special": null,
                  "disallowed_special": null,
                  "chunk_size": null,
                  "client": null,
                  "deployment": null,
                  "embedding_ctx_length": null,
                  "max_retries": null,
                  "model": null,
                  "model_kwargs": null,
                  "openai_api_base": null,
                  "openai_api_type": null,
                  "openai_api_version": null,
                  "openai_organization": null,
                  "openai_proxy": null,
                  "request_timeout": null,
                  "show_progress_bar": null,
                  "skip_empty": null,
                  "tiktoken_enable": null,
                  "tiktoken_model_name": null
                },
                "output_types": [
                  "Embeddings"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "OpenAIEmbeddings-pgEJV"
            },
            "selected": false,
            "width": 384,
            "height": 395,
            "positionAbsolute": {
              "x": -309.1318864451977,
              "y": 996.0297299275702
            },
            "dragging": false
          },
          {
            "id": "SplitText-FcXx7",
            "type": "genericNode",
            "position": {
              "x": -103.38129244183153,
              "y": 29.88922126345176
            },
            "data": {
              "type": "SplitText",
              "node": {
                "template": {
                  "inputs": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "inputs",
                    "display_name": "Inputs",
                    "advanced": false,
                    "input_types": [
                      "Record",
                      "Text"
                    ],
                    "dynamic": false,
                    "info": "Texts to split.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chunk_overlap": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 200,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chunk_overlap",
                    "display_name": "Chunk Overlap",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The amount of character overlap between chunks.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chunk_size": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 1000,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chunk_size",
                    "display_name": "Max Chunk Size",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The maximum length (in number of characters) of each chunk.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langchain.text_splitter import CharacterTextSplitter, RecursiveCharacterTextSplitter\nfrom langchain_core.documents import Document\n\nfrom langflow.field_typing import Text\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema import Record\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(CustomComponent):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks of a specified length.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Inputs\",\n                \"info\": \"Texts to split.\",\n                \"input_types\": [\"Record\", \"Text\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on. Defaults to [\" \"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Max Chunk Size\",\n                \"info\": \"The maximum length (in number of characters) of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of character overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"recursive\": {\n                \"display_name\": \"Recursive\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Text],\n        separators: Optional[list[str]] = [\" \"],\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n        recursive: bool = False,\n    ) -> list[Record]:\n        if separators is None:\n            separators = []\n        separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter: Optional[Union[CharacterTextSplitter, RecursiveCharacterTextSplitter]] = None\n        if recursive:\n            splitter = RecursiveCharacterTextSplitter(\n                separators=separators,\n                chunk_size=chunk_size,\n                chunk_overlap=chunk_overlap,\n            )\n\n        else:\n            splitter = CharacterTextSplitter(\n                separator=separators[0],\n                chunk_size=chunk_size,\n                chunk_overlap=chunk_overlap,\n            )\n\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(Document(page_content=_input))\n\n        records = self.to_records(splitter.split_documents(documents))\n        self.status = records\n        return records\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "recursive": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "recursive",
                    "display_name": "Recursive",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "separators": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": [
                      " "
                    ],
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "separators",
                    "display_name": "Separators",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The characters to split on. Defaults to [\" \"].",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "_type": "CustomComponent"
                },
                "description": "Split text into chunks of a specified length.",
                "base_classes": [
                  "Record"
                ],
                "display_name": "Split Text",
                "documentation": "",
                "custom_fields": {
                  "inputs": null,
                  "separators": null,
                  "chunk_size": null,
                  "chunk_overlap": null,
                  "recursive": null
                },
                "output_types": [
                  "Record"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "SplitText-FcXx7"
            },
            "selected": false,
            "width": 384,
            "height": 631,
            "positionAbsolute": {
              "x": -103.38129244183153,
              "y": 29.88922126345176
            },
            "dragging": false
          },
          {
            "id": "ChromaSearch-WOBis",
            "type": "genericNode",
            "position": {
              "x": 1352.3924768846211,
              "y": -8.78937298394223
            },
            "data": {
              "type": "ChromaSearch",
              "node": {
                "template": {
                  "embedding": {
                    "type": "Embeddings",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "embedding",
                    "display_name": "Embedding",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Embedding model to vectorize inputs (make sure to use same as index)",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "input_value": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_value",
                    "display_name": "Input",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chroma_server_cors_allow_origins": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_cors_allow_origins",
                    "display_name": "Server CORS Allow Origins",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chroma_server_grpc_port": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_grpc_port",
                    "display_name": "Server gRPC Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chroma_server_host": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_host",
                    "display_name": "Server Host",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "chroma_server_port": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_port",
                    "display_name": "Server Port",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "chroma_server_ssl_enabled": {
                    "type": "bool",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "chroma_server_ssl_enabled",
                    "display_name": "Server SSL Enabled",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import List, Optional\n\nimport chromadb  # type: ignore\nfrom langchain_community.vectorstores.chroma import Chroma\n\nfrom langflow.components.vectorstores.base.model import LCVectorStoreComponent\nfrom langflow.field_typing import Embeddings, Text\nfrom langflow.schema import Record\n\n\nclass ChromaSearchComponent(LCVectorStoreComponent):\n    display_name: str = \"Chroma Search\"\n    description: str = \"Search a Chroma collection for similar documents.\"\n    icon = \"Chroma\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            # \"persist\": {\"display_name\": \"Persist\"},\n            \"index_directory\": {\"display_name\": \"Index Directory\"},\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"embedding\": {\n                \"display_name\": \"Embedding\",\n                \"info\": \"Embedding model to vectorize inputs (make sure to use same as index)\",\n            },\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        search_type: str,\n        collection_name: str,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        number_of_results: int = 4,\n        index_directory: Optional[str] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> List[Record]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n        if index_directory:\n            index_directory = self.resolve_path(index_directory)\n        vector_store = Chroma(\n            embedding_function=embedding,\n            collection_name=collection_name,\n            persist_directory=index_directory,\n            client_settings=chroma_settings,\n        )\n\n        return self.search_with_vector_store(input_value, search_type, vector_store, k=number_of_results)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": true,
                    "dynamic": true,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "collection_name": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "langflow",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "collection_name",
                    "display_name": "Collection Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "index_directory": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "index_directory",
                    "display_name": "Index Directory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ]
                  },
                  "number_of_results": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 4,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "number_of_results",
                    "display_name": "Number of Results",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Number of results to return.",
                    "load_from_db": false,
                    "title_case": false
                  },
                  "search_type": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Similarity",
                      "MMR"
                    ],
                    "name": "search_type",
                    "display_name": "Search Type",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "load_from_db": false,
                    "title_case": false,
                    "input_types": [
                      "Text"
                    ],
                    "value": "Similarity"
                  },
                  "_type": "CustomComponent"
                },
                "description": "Search a Chroma collection for similar documents.",
                "icon": "Chroma",
                "base_classes": [
                  "Record"
                ],
                "display_name": "Chroma Search",
                "documentation": "",
                "custom_fields": {
                  "input_value": null,
                  "search_type": null,
                  "collection_name": null,
                  "embedding": null,
                  "chroma_server_ssl_enabled": null,
                  "number_of_results": null,
                  "index_directory": null,
                  "chroma_server_cors_allow_origins": null,
                  "chroma_server_host": null,
                  "chroma_server_port": null,
                  "chroma_server_grpc_port": null
                },
                "output_types": [
                  "Record"
                ],
                "field_formatters": {},
                "frozen": false,
                "field_order": [],
                "beta": false
              },
              "id": "ChromaSearch-WOBis"
            },
            "selected": false,
            "width": 384,
            "height": 647,
            "positionAbsolute": {
              "x": 1352.3924768846211,
              "y": -8.78937298394223
            },
            "dragging": false
          }
        ],
        "edges": [
          {
            "source": "TextInput-Ywk6X",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-Ywk6Xœ}",
            "target": "ChatInput-S8dAB",
            "targetHandle": "{œfieldNameœ:œsender_nameœ,œidœ:œChatInput-S8dABœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "sender_name",
                "id": "ChatInput-S8dAB",
                "inputTypes": [
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "str",
                  "Text"
                ],
                "dataType": "TextInput",
                "id": "TextInput-Ywk6X"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-TextInput-Ywk6X{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-Ywk6Xœ}-ChatInput-S8dAB{œfieldNameœ:œsender_nameœ,œidœ:œChatInput-S8dABœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "ChatInput-S8dAB",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-S8dABœ}",
            "target": "Prompt-6Db2d",
            "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "question",
                "id": "Prompt-6Db2d",
                "inputTypes": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "Record",
                  "str",
                  "Text"
                ],
                "dataType": "ChatInput",
                "id": "ChatInput-S8dAB"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-ChatInput-S8dAB{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-S8dABœ}-Prompt-6Db2d{œfieldNameœ:œquestionœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "TextInput-Ywk6X",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-Ywk6Xœ}",
            "target": "MemoryComponent-4Q88f",
            "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-4Q88fœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "session_id",
                "id": "MemoryComponent-4Q88f",
                "inputTypes": [
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "str",
                  "Text"
                ],
                "dataType": "TextInput",
                "id": "TextInput-Ywk6X"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-TextInput-Ywk6X{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-Ywk6Xœ}-MemoryComponent-4Q88f{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-4Q88fœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "MemoryComponent-4Q88f",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-4Q88fœ}",
            "target": "Prompt-6Db2d",
            "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "history",
                "id": "Prompt-6Db2d",
                "inputTypes": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "str",
                  "Text"
                ],
                "dataType": "MemoryComponent",
                "id": "MemoryComponent-4Q88f"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-MemoryComponent-4Q88f{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-4Q88fœ}-Prompt-6Db2d{œfieldNameœ:œhistoryœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "Prompt-6Db2d",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-6Db2dœ}",
            "target": "OpenAIModel-56j5U",
            "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-56j5Uœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "input_value",
                "id": "OpenAIModel-56j5U",
                "inputTypes": [
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "str",
                  "Text"
                ],
                "dataType": "Prompt",
                "id": "Prompt-6Db2d"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-Prompt-6Db2d{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-6Db2dœ}-OpenAIModel-56j5U{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-56j5Uœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "OpenAIModel-56j5U",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-56j5Uœ}",
            "target": "ChatOutput-osPj0",
            "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-osPj0œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "input_value",
                "id": "ChatOutput-osPj0",
                "inputTypes": [
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "str",
                  "Text"
                ],
                "dataType": "OpenAIModel",
                "id": "OpenAIModel-56j5U"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-OpenAIModel-56j5U{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-56j5Uœ}-ChatOutput-osPj0{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-osPj0œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "OpenAIEmbeddings-pgEJV",
            "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-pgEJVœ}",
            "target": "Chroma-mi4XC",
            "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-mi4XCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
            "data": {
              "targetHandle": {
                "fieldName": "embedding",
                "id": "Chroma-mi4XC",
                "inputTypes": null,
                "type": "Embeddings"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Embeddings"
                ],
                "dataType": "OpenAIEmbeddings",
                "id": "OpenAIEmbeddings-pgEJV"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-OpenAIEmbeddings-pgEJV{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-pgEJVœ}-Chroma-mi4XC{œfieldNameœ:œembeddingœ,œidœ:œChroma-mi4XCœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "URL-WCRPW",
            "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-WCRPWœ}",
            "target": "SplitText-FcXx7",
            "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œSplitText-FcXx7œ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "inputs",
                "id": "SplitText-FcXx7",
                "inputTypes": [
                  "Record",
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Record"
                ],
                "dataType": "URL",
                "id": "URL-WCRPW"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-URL-WCRPW{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-WCRPWœ}-SplitText-FcXx7{œfieldNameœ:œinputsœ,œidœ:œSplitText-FcXx7œ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "SplitText-FcXx7",
            "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSplitTextœ,œidœ:œSplitText-FcXx7œ}",
            "target": "Chroma-mi4XC",
            "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œChroma-mi4XCœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
            "data": {
              "targetHandle": {
                "fieldName": "inputs",
                "id": "Chroma-mi4XC",
                "inputTypes": [
                  "Document",
                  "Record"
                ],
                "type": "Record"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Record"
                ],
                "dataType": "SplitText",
                "id": "SplitText-FcXx7"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-SplitText-FcXx7{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSplitTextœ,œidœ:œSplitText-FcXx7œ}-Chroma-mi4XC{œfieldNameœ:œinputsœ,œidœ:œChroma-mi4XCœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "ChatInput-S8dAB",
            "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-S8dABœ}",
            "target": "ChromaSearch-WOBis",
            "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChromaSearch-WOBisœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "input_value",
                "id": "ChromaSearch-WOBis",
                "inputTypes": [
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "object",
                  "Record",
                  "str",
                  "Text"
                ],
                "dataType": "ChatInput",
                "id": "ChatInput-S8dAB"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-ChatInput-S8dAB{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-S8dABœ}-ChromaSearch-WOBis{œfieldNameœ:œinput_valueœ,œidœ:œChromaSearch-WOBisœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "OpenAIEmbeddings-pgEJV",
            "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-pgEJVœ}",
            "target": "ChromaSearch-WOBis",
            "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChromaSearch-WOBisœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
            "data": {
              "targetHandle": {
                "fieldName": "embedding",
                "id": "ChromaSearch-WOBis",
                "inputTypes": null,
                "type": "Embeddings"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Embeddings"
                ],
                "dataType": "OpenAIEmbeddings",
                "id": "OpenAIEmbeddings-pgEJV"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-OpenAIEmbeddings-pgEJV{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-pgEJVœ}-ChromaSearch-WOBis{œfieldNameœ:œembeddingœ,œidœ:œChromaSearch-WOBisœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
            "animated": false,
            "selected": false
          },
          {
            "source": "ChromaSearch-WOBis",
            "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œChromaSearchœ,œidœ:œChromaSearch-WOBisœ}",
            "target": "Prompt-6Db2d",
            "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "data": {
              "targetHandle": {
                "fieldName": "context",
                "id": "Prompt-6Db2d",
                "inputTypes": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "type": "str"
              },
              "sourceHandle": {
                "baseClasses": [
                  "Record"
                ],
                "dataType": "ChromaSearch",
                "id": "ChromaSearch-WOBis"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "id": "reactflow__edge-ChromaSearch-WOBis{œbaseClassesœ:[œRecordœ],œdataTypeœ:œChromaSearchœ,œidœ:œChromaSearch-WOBisœ}-Prompt-6Db2d{œfieldNameœ:œcontextœ,œidœ:œPrompt-6Db2dœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
            "animated": false,
            "selected": false
          }
        ],
        "viewport": {
          "x": 268.3979754101016,
          "y": 547.0015318389776,
          "zoom": 0.6421781173247878
        }
      },
      "is_component": false,
      "updated_at": "2024-05-07T02:23:44.547974",
      "folder": null,
      "id": "9899263f-deaa-4bfe-9425-48b94bf5c36f",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "PromptTemplate  Memory",
      "description": "Mapping Meaningful Conversations.",
      "data": {
        "nodes": [
          {
            "id": "BaseChatModel-QHCZI",
            "type": "genericNode",
            "position": {
              "x": -199.43365231041417,
              "y": -893.5939711115567
            },
            "data": {
              "type": "BaseChatModel",
              "node": {
                "template": {
                  "metadata": {
                    "type": "Dict[str, Any]",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "metadata",
                    "display_name": "Metadata",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Metadata to add to the run trace.",
                    "title_case": true
                  },
                  "stop": {
                    "type": "list",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "stop",
                    "display_name": "Stop Tokens",
                    "advanced": true,
                    "dynamic": false,
                    "info": "List of tokens to signal the model to stop generating text.",
                    "title_case": true
                  },
                  "tags": {
                    "type": "list",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tags",
                    "display_name": "Tags",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Tags to add to the run trace.",
                    "title_case": true
                  },
                  "base_url": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "base_url",
                    "display_name": "Base URL",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                    "title_case": true,
                    "value": "http://example.com"
                  },
                  "cache": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "cache",
                    "display_name": "Cache",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Enable or disable caching.",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Any, Dict, List, Optional\n\n# from langchain_community.chat_models import ChatOllama\nfrom langchain_community.chat_models import ChatOllama\nfrom langchain_core.language_models.chat_models import BaseChatModel\n\n# from langchain.chat_models import ChatOllama\nfrom langflow import CustomComponent\n\n# whe When a callback component is added to Langflow, the comment must be uncommented.\n# from langchain.callbacks.manager import CallbackManager\n\n\nclass ChatOllamaComponent(CustomComponent):\n    display_name = \"ChatOllama\"\n    description = \"Local LLM for chat with Ollama.\"\n\n    def build_config(self) -> dict:\n        return {\n            \"base_url\": {\n                \"display_name\": \"Base URL\",\n                \"info\": \"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            },\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"llama2\",\n                \"info\": \"Refer to https://ollama.ai/library for more models.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.8,\n                \"info\": \"Controls the creativity of model responses.\",\n            },\n            \"cache\": {\n                \"display_name\": \"Cache\",\n                \"field_type\": \"bool\",\n                \"info\": \"Enable or disable caching.\",\n                \"advanced\": True,\n                \"value\": False,\n            },\n            ### When a callback component is added to Langflow, the comment must be uncommented. ###\n            # \"callback_manager\": {\n            #     \"display_name\": \"Callback Manager\",\n            #     \"info\": \"Optional callback manager for additional functionality.\",\n            #     \"advanced\": True,\n            # },\n            # \"callbacks\": {\n            #     \"display_name\": \"Callbacks\",\n            #     \"info\": \"Callbacks to execute during model runtime.\",\n            #     \"advanced\": True,\n            # },\n            ########################################################################################\n            \"format\": {\n                \"display_name\": \"Format\",\n                \"field_type\": \"str\",\n                \"info\": \"Specify the format of the output (e.g., json).\",\n                \"advanced\": True,\n            },\n            \"metadata\": {\n                \"display_name\": \"Metadata\",\n                \"info\": \"Metadata to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"mirostat\": {\n                \"display_name\": \"Mirostat\",\n                \"options\": [\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n                \"info\": \"Enable/disable Mirostat sampling for controlling perplexity.\",\n                \"value\": \"Disabled\",\n                \"advanced\": True,\n            },\n            \"mirostat_eta\": {\n                \"display_name\": \"Mirostat Eta\",\n                \"field_type\": \"float\",\n                \"info\": \"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n                \"advanced\": True,\n            },\n            \"mirostat_tau\": {\n                \"display_name\": \"Mirostat Tau\",\n                \"field_type\": \"float\",\n                \"info\": \"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n                \"advanced\": True,\n            },\n            \"num_ctx\": {\n                \"display_name\": \"Context Window Size\",\n                \"field_type\": \"int\",\n                \"info\": \"Size of the context window for generating tokens. (Default: 2048)\",\n                \"advanced\": True,\n            },\n            \"num_gpu\": {\n                \"display_name\": \"Number of GPUs\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n                \"advanced\": True,\n            },\n            \"num_thread\": {\n                \"display_name\": \"Number of Threads\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of threads to use during computation. (Default: detected for optimal performance)\",\n                \"advanced\": True,\n            },\n            \"repeat_last_n\": {\n                \"display_name\": \"Repeat Last N\",\n                \"field_type\": \"int\",\n                \"info\": \"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n                \"advanced\": True,\n            },\n            \"repeat_penalty\": {\n                \"display_name\": \"Repeat Penalty\",\n                \"field_type\": \"float\",\n                \"info\": \"Penalty for repetitions in generated text. (Default: 1.1)\",\n                \"advanced\": True,\n            },\n            \"tfs_z\": {\n                \"display_name\": \"TFS Z\",\n                \"field_type\": \"float\",\n                \"info\": \"Tail free sampling value. (Default: 1)\",\n                \"advanced\": True,\n            },\n            \"timeout\": {\n                \"display_name\": \"Timeout\",\n                \"field_type\": \"int\",\n                \"info\": \"Timeout for the request stream.\",\n                \"advanced\": True,\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"field_type\": \"int\",\n                \"info\": \"Limits token selection to top K. (Default: 40)\",\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"field_type\": \"float\",\n                \"info\": \"Works together with top-k. (Default: 0.9)\",\n                \"advanced\": True,\n            },\n            \"verbose\": {\n                \"display_name\": \"Verbose\",\n                \"field_type\": \"bool\",\n                \"info\": \"Whether to print out response text.\",\n            },\n            \"tags\": {\n                \"display_name\": \"Tags\",\n                \"field_type\": \"list\",\n                \"info\": \"Tags to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"stop\": {\n                \"display_name\": \"Stop Tokens\",\n                \"field_type\": \"list\",\n                \"info\": \"List of tokens to signal the model to stop generating text.\",\n                \"advanced\": True,\n            },\n            \"system\": {\n                \"display_name\": \"System\",\n                \"field_type\": \"str\",\n                \"info\": \"System to use for generating text.\",\n                \"advanced\": True,\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"field_type\": \"str\",\n                \"info\": \"Template to use for generating text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        base_url: Optional[str],\n        model: str,\n        mirostat: Optional[str],\n        mirostat_eta: Optional[float] = None,\n        mirostat_tau: Optional[float] = None,\n        ### When a callback component is added to Langflow, the comment must be uncommented.###\n        # callback_manager: Optional[CallbackManager] = None,\n        # callbacks: Optional[List[Callbacks]] = None,\n        #######################################################################################\n        repeat_last_n: Optional[int] = None,\n        verbose: Optional[bool] = None,\n        cache: Optional[bool] = None,\n        num_ctx: Optional[int] = None,\n        num_gpu: Optional[int] = None,\n        format: Optional[str] = None,\n        metadata: Optional[Dict[str, Any]] = None,\n        num_thread: Optional[int] = None,\n        repeat_penalty: Optional[float] = None,\n        stop: Optional[List[str]] = None,\n        system: Optional[str] = None,\n        tags: Optional[List[str]] = None,\n        temperature: Optional[float] = None,\n        template: Optional[str] = None,\n        tfs_z: Optional[float] = None,\n        timeout: Optional[int] = None,\n        top_k: Optional[int] = None,\n        top_p: Optional[int] = None,\n    ) -> BaseChatModel:\n        if not base_url:\n            base_url = \"http://localhost:11434\"\n\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": base_url,\n            \"cache\": cache,\n            \"model\": model,\n            \"mirostat\": mirostat_value,\n            \"format\": format,\n            \"metadata\": metadata,\n            \"tags\": tags,\n            ## When a callback component is added to Langflow, the comment must be uncommented.##\n            # \"callback_manager\": callback_manager,\n            # \"callbacks\": callbacks,\n            #####################################################################################\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": num_ctx,\n            \"num_gpu\": num_gpu,\n            \"num_thread\": num_thread,\n            \"repeat_last_n\": repeat_last_n,\n            \"repeat_penalty\": repeat_penalty,\n            \"temperature\": temperature,\n            \"stop\": stop,\n            \"system\": system,\n            \"template\": template,\n            \"tfs_z\": tfs_z,\n            \"timeout\": timeout,\n            \"top_k\": top_k,\n            \"top_p\": top_p,\n            \"verbose\": verbose,\n        }\n\n        # None Value remove\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "format": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "format",
                    "display_name": "Format",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Specify the format of the output (e.g., json).",
                    "title_case": true
                  },
                  "mirostat": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Disabled",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Disabled",
                      "Mirostat",
                      "Mirostat 2.0"
                    ],
                    "name": "mirostat",
                    "display_name": "Mirostat",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                    "title_case": true
                  },
                  "mirostat_eta": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "mirostat_eta",
                    "display_name": "Mirostat Eta",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "mirostat_tau": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "mirostat_tau",
                    "display_name": "Mirostat Tau",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "model": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "qwen:14b",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Refer to https://ollama.ai/library for more models.",
                    "title_case": true
                  },
                  "num_ctx": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_ctx",
                    "display_name": "Context Window Size",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Size of the context window for generating tokens. (Default: 2048)",
                    "title_case": true
                  },
                  "num_gpu": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_gpu",
                    "display_name": "Number of GPUs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                    "title_case": true
                  },
                  "num_thread": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_thread",
                    "display_name": "Number of Threads",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                    "title_case": true
                  },
                  "repeat_last_n": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "repeat_last_n",
                    "display_name": "Repeat Last N",
                    "advanced": true,
                    "dynamic": false,
                    "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                    "title_case": true
                  },
                  "repeat_penalty": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "repeat_penalty",
                    "display_name": "Repeat Penalty",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "system": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "system",
                    "display_name": "System",
                    "advanced": true,
                    "dynamic": false,
                    "info": "System to use for generating text.",
                    "title_case": true
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 0.8,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Controls the creativity of model responses.",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "template": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "template",
                    "display_name": "Template",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Template to use for generating text.",
                    "title_case": true
                  },
                  "tfs_z": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tfs_z",
                    "display_name": "TFS Z",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Tail free sampling value. (Default: 1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "timeout": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "timeout",
                    "display_name": "Timeout",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Timeout for the request stream.",
                    "title_case": true
                  },
                  "top_k": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "top_k",
                    "display_name": "Top K",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Limits token selection to top K. (Default: 40)",
                    "title_case": true
                  },
                  "top_p": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "top_p",
                    "display_name": "Top P",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Works together with top-k. (Default: 0.9)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "verbose": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "verbose",
                    "display_name": "Verbose",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Whether to print out response text.",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Local LLM for chat with Ollama.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseChatModel"
                ],
                "display_name": "ChatOllama",
                "documentation": "",
                "custom_fields": {
                  "base_url": null,
                  "model": null,
                  "mirostat": null,
                  "mirostat_eta": null,
                  "mirostat_tau": null,
                  "repeat_last_n": null,
                  "verbose": null,
                  "cache": null,
                  "num_ctx": null,
                  "num_gpu": null,
                  "format": null,
                  "metadata": null,
                  "num_thread": null,
                  "repeat_penalty": null,
                  "stop": null,
                  "system": null,
                  "tags": null,
                  "temperature": null,
                  "template": null,
                  "tfs_z": null,
                  "timeout": null,
                  "top_k": null,
                  "top_p": null
                },
                "output_types": [
                  "BaseChatModel"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "BaseChatModel-QHCZI"
            },
            "selected": true,
            "width": 384,
            "height": 630,
            "positionAbsolute": {
              "x": -199.43365231041417,
              "y": -893.5939711115567
            },
            "dragging": false
          },
          {
            "id": "LLMChain-ADl3v",
            "type": "genericNode",
            "position": {
              "x": 732.4991606671895,
              "y": -518.8506290908874
            },
            "data": {
              "type": "LLMChain",
              "node": {
                "template": {
                  "llm": {
                    "type": "BaseLanguageModel",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "memory": {
                    "type": "BaseMemory",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "memory",
                    "display_name": "Memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "prompt": {
                    "type": "BasePromptTemplate",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "prompt",
                    "display_name": "Prompt",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Chain to run queries against LLMs",
                "base_classes": [
                  "Chain",
                  "Callable",
                  "LLMChain",
                  "Chain"
                ],
                "display_name": "LLMChain",
                "documentation": "",
                "custom_fields": {
                  "prompt": null,
                  "llm": null,
                  "memory": null
                },
                "output_types": [
                  "Chain",
                  "Callable",
                  "LLMChain"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "LLMChain-ADl3v"
            },
            "selected": false,
            "width": 384,
            "height": 425,
            "positionAbsolute": {
              "x": 732.4991606671895,
              "y": -518.8506290908874
            },
            "dragging": false
          },
          {
            "id": "PromptTemplate-oholM",
            "type": "genericNode",
            "position": {
              "x": -37.00793346052211,
              "y": 439.934413003322
            },
            "data": {
              "type": "PromptTemplate",
              "node": {
                "template": {
                  "output_parser": {
                    "type": "BaseOutputParser",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "output_parser",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_types": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_types",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_variables": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": [
                      "input"
                    ]
                  },
                  "metadata": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "metadata",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "name",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "partial_variables": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "partial_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "tags": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "tags",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "template": {
                    "type": "prompt",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "fileTypes": [],
                    "password": false,
                    "name": "template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": "\n用户：{input}"
                  },
                  "template_format": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": "f-string",
                    "fileTypes": [],
                    "password": false,
                    "name": "template_format",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "validate_template": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "validate_template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "PromptTemplate",
                  "input": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input",
                    "display_name": "input",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  }
                },
                "description": "A prompt template for a language model.",
                "icon": null,
                "base_classes": [
                  "StringPromptTemplate",
                  "BasePromptTemplate",
                  "PromptTemplate"
                ],
                "name": "",
                "display_name": "PromptTemplate",
                "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                "custom_fields": {
                  "": [
                    "input"
                  ]
                },
                "output_types": [],
                "full_path": null,
                "field_formatters": {},
                "beta": false,
                "error": null
              },
              "id": "PromptTemplate-oholM",
              "description": "A prompt template for a language model.",
              "display_name": "PromptTemplate",
              "showNode": true
            },
            "selected": false,
            "width": 384,
            "height": 375,
            "positionAbsolute": {
              "x": -37.00793346052211,
              "y": 439.934413003322
            },
            "dragging": false
          },
          {
            "id": "PostgresChatMessageHistory-NTFI8",
            "type": "genericNode",
            "position": {
              "x": -641.3267758310752,
              "y": -201.59217025144864
            },
            "data": {
              "type": "PostgresChatMessageHistory",
              "node": {
                "template": {
                  "connection_string": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "postgresql://gateway:1qaz2wsx@localhost/chat_history",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "connection_string",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "session_id": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "user",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "session_id",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "table_name": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "message_store",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "table_name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "PostgresChatMessageHistory"
                },
                "description": "Memory store with Postgres",
                "base_classes": [
                  "PostgresChatMessageHistory",
                  "BaseChatMessageHistory"
                ],
                "display_name": "PostgresChatMessageHistory",
                "documentation": "https://python.langchain.com/docs/modules/memory/integrations/postgres_chat_message_history",
                "custom_fields": {},
                "output_types": [],
                "field_formatters": {},
                "beta": false
              },
              "id": "PostgresChatMessageHistory-NTFI8",
              "showNode": true
            },
            "selected": false,
            "width": 384,
            "height": 476,
            "positionAbsolute": {
              "x": -641.3267758310752,
              "y": -201.59217025144864
            },
            "dragging": false
          },
          {
            "id": "ConversationBufferMemory-Xfh8F",
            "type": "genericNode",
            "position": {
              "x": -38.97968372378216,
              "y": -214.75921815964637
            },
            "data": {
              "type": "ConversationBufferMemory",
              "node": {
                "template": {
                  "chat_memory": {
                    "type": "BaseChatMessageHistory",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "chat_memory",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "ai_prefix": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": "AI",
                    "fileTypes": [],
                    "password": false,
                    "name": "ai_prefix",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "human_prefix": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": "Human",
                    "fileTypes": [],
                    "password": false,
                    "name": "human_prefix",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "input_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input_key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The variable to be used as Chat Input when more than one variable is available.",
                    "title_case": true
                  },
                  "memory_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "chat_history",
                    "fileTypes": [],
                    "password": false,
                    "name": "memory_key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "output_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "output_key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                    "title_case": true
                  },
                  "return_messages": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "return_messages",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "ConversationBufferMemory"
                },
                "description": "Buffer for storing conversation memory.",
                "base_classes": [
                  "BaseChatMemory",
                  "ConversationBufferMemory",
                  "BaseMemory"
                ],
                "display_name": "ConversationBufferMemory",
                "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
                "custom_fields": {},
                "output_types": [],
                "field_formatters": {},
                "beta": false
              },
              "id": "ConversationBufferMemory-Xfh8F",
              "showNode": true
            },
            "selected": false,
            "width": 384,
            "height": 600,
            "positionAbsolute": {
              "x": -38.97968372378216,
              "y": -214.75921815964637
            },
            "dragging": false
          }
        ],
        "edges": [
          {
            "source": "BaseChatModel-QHCZI",
            "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ],œdataTypeœ:œBaseChatModelœ,œidœ:œBaseChatModel-QHCZIœ}",
            "target": "LLMChain-ADl3v",
            "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
            "data": {
              "targetHandle": {
                "fieldName": "llm",
                "id": "LLMChain-ADl3v",
                "inputTypes": null,
                "type": "BaseLanguageModel"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseLanguageModel",
                  "BaseChatModel"
                ],
                "dataType": "BaseChatModel",
                "id": "BaseChatModel-QHCZI"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-BaseChatModel-QHCZI{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ],œdataTypeœ:œBaseChatModelœ,œidœ:œBaseChatModel-QHCZIœ}-LLMChain-ADl3v{œfieldNameœ:œllmœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
          },
          {
            "source": "PromptTemplate-oholM",
            "sourceHandle": "{œbaseClassesœ:[œStringPromptTemplateœ,œBasePromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-oholMœ}",
            "target": "LLMChain-ADl3v",
            "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
            "data": {
              "targetHandle": {
                "fieldName": "prompt",
                "id": "LLMChain-ADl3v",
                "inputTypes": null,
                "type": "BasePromptTemplate"
              },
              "sourceHandle": {
                "baseClasses": [
                  "StringPromptTemplate",
                  "BasePromptTemplate",
                  "PromptTemplate"
                ],
                "dataType": "PromptTemplate",
                "id": "PromptTemplate-oholM"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PromptTemplate-oholM{œbaseClassesœ:[œStringPromptTemplateœ,œBasePromptTemplateœ,œPromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-oholMœ}-LLMChain-ADl3v{œfieldNameœ:œpromptœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
          },
          {
            "source": "PostgresChatMessageHistory-NTFI8",
            "sourceHandle": "{œbaseClassesœ:[œPostgresChatMessageHistoryœ,œBaseChatMessageHistoryœ],œdataTypeœ:œPostgresChatMessageHistoryœ,œidœ:œPostgresChatMessageHistory-NTFI8œ}",
            "target": "ConversationBufferMemory-Xfh8F",
            "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œConversationBufferMemory-Xfh8Fœ,œinputTypesœ:null,œtypeœ:œBaseChatMessageHistoryœ}",
            "data": {
              "targetHandle": {
                "fieldName": "chat_memory",
                "id": "ConversationBufferMemory-Xfh8F",
                "inputTypes": null,
                "type": "BaseChatMessageHistory"
              },
              "sourceHandle": {
                "baseClasses": [
                  "PostgresChatMessageHistory",
                  "BaseChatMessageHistory"
                ],
                "dataType": "PostgresChatMessageHistory",
                "id": "PostgresChatMessageHistory-NTFI8"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PostgresChatMessageHistory-NTFI8{œbaseClassesœ:[œPostgresChatMessageHistoryœ,œBaseChatMessageHistoryœ],œdataTypeœ:œPostgresChatMessageHistoryœ,œidœ:œPostgresChatMessageHistory-NTFI8œ}-ConversationBufferMemory-Xfh8F{œfieldNameœ:œchat_memoryœ,œidœ:œConversationBufferMemory-Xfh8Fœ,œinputTypesœ:null,œtypeœ:œBaseChatMessageHistoryœ}"
          },
          {
            "source": "ConversationBufferMemory-Xfh8F",
            "sourceHandle": "{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-Xfh8Fœ}",
            "target": "LLMChain-ADl3v",
            "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
            "data": {
              "targetHandle": {
                "fieldName": "memory",
                "id": "LLMChain-ADl3v",
                "inputTypes": null,
                "type": "BaseMemory"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseChatMemory",
                  "ConversationBufferMemory",
                  "BaseMemory"
                ],
                "dataType": "ConversationBufferMemory",
                "id": "ConversationBufferMemory-Xfh8F"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-ConversationBufferMemory-Xfh8F{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-Xfh8Fœ}-LLMChain-ADl3v{œfieldNameœ:œmemoryœ,œidœ:œLLMChain-ADl3vœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
          }
        ],
        "viewport": {
          "x": 385.5845186374411,
          "y": 568.9591659430547,
          "zoom": 0.8838407185895912
        }
      },
      "is_component": false,
      "updated_at": "2024-05-06T12:56:29.353992",
      "folder": null,
      "id": "53cdbda5-86a8-4f8a-ac46-b4dda4e42540",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "ChatOllama",
      "description": "Local LLM for chat with Ollama.",
      "data": {
        "edges": [],
        "nodes": [
          {
            "data": {
              "type": "BaseChatModel",
              "node": {
                "template": {
                  "metadata": {
                    "type": "Dict[str, Any]",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "metadata",
                    "display_name": "Metadata",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Metadata to add to the run trace.",
                    "title_case": true
                  },
                  "stop": {
                    "type": "list",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "stop",
                    "display_name": "Stop Tokens",
                    "advanced": true,
                    "dynamic": false,
                    "info": "List of tokens to signal the model to stop generating text.",
                    "title_case": true
                  },
                  "tags": {
                    "type": "list",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tags",
                    "display_name": "Tags",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Tags to add to the run trace.",
                    "title_case": true
                  },
                  "base_url": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "base_url",
                    "display_name": "Base URL",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                    "title_case": true,
                    "value": "http://example.com"
                  },
                  "cache": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "cache",
                    "display_name": "Cache",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Enable or disable caching.",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Any, Dict, List, Optional\n\n# from langchain_community.chat_models import ChatOllama\nfrom langchain_community.chat_models import ChatOllama\nfrom langchain_core.language_models.chat_models import BaseChatModel\n\n# from langchain.chat_models import ChatOllama\nfrom langflow import CustomComponent\n\n# whe When a callback component is added to Langflow, the comment must be uncommented.\n# from langchain.callbacks.manager import CallbackManager\n\n\nclass ChatOllamaComponent(CustomComponent):\n    display_name = \"ChatOllama\"\n    description = \"Local LLM for chat with Ollama.\"\n\n    def build_config(self) -> dict:\n        return {\n            \"base_url\": {\n                \"display_name\": \"Base URL\",\n                \"info\": \"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            },\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"llama2\",\n                \"info\": \"Refer to https://ollama.ai/library for more models.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.8,\n                \"info\": \"Controls the creativity of model responses.\",\n            },\n            \"cache\": {\n                \"display_name\": \"Cache\",\n                \"field_type\": \"bool\",\n                \"info\": \"Enable or disable caching.\",\n                \"advanced\": True,\n                \"value\": False,\n            },\n            ### When a callback component is added to Langflow, the comment must be uncommented. ###\n            # \"callback_manager\": {\n            #     \"display_name\": \"Callback Manager\",\n            #     \"info\": \"Optional callback manager for additional functionality.\",\n            #     \"advanced\": True,\n            # },\n            # \"callbacks\": {\n            #     \"display_name\": \"Callbacks\",\n            #     \"info\": \"Callbacks to execute during model runtime.\",\n            #     \"advanced\": True,\n            # },\n            ########################################################################################\n            \"format\": {\n                \"display_name\": \"Format\",\n                \"field_type\": \"str\",\n                \"info\": \"Specify the format of the output (e.g., json).\",\n                \"advanced\": True,\n            },\n            \"metadata\": {\n                \"display_name\": \"Metadata\",\n                \"info\": \"Metadata to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"mirostat\": {\n                \"display_name\": \"Mirostat\",\n                \"options\": [\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n                \"info\": \"Enable/disable Mirostat sampling for controlling perplexity.\",\n                \"value\": \"Disabled\",\n                \"advanced\": True,\n            },\n            \"mirostat_eta\": {\n                \"display_name\": \"Mirostat Eta\",\n                \"field_type\": \"float\",\n                \"info\": \"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n                \"advanced\": True,\n            },\n            \"mirostat_tau\": {\n                \"display_name\": \"Mirostat Tau\",\n                \"field_type\": \"float\",\n                \"info\": \"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n                \"advanced\": True,\n            },\n            \"num_ctx\": {\n                \"display_name\": \"Context Window Size\",\n                \"field_type\": \"int\",\n                \"info\": \"Size of the context window for generating tokens. (Default: 2048)\",\n                \"advanced\": True,\n            },\n            \"num_gpu\": {\n                \"display_name\": \"Number of GPUs\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n                \"advanced\": True,\n            },\n            \"num_thread\": {\n                \"display_name\": \"Number of Threads\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of threads to use during computation. (Default: detected for optimal performance)\",\n                \"advanced\": True,\n            },\n            \"repeat_last_n\": {\n                \"display_name\": \"Repeat Last N\",\n                \"field_type\": \"int\",\n                \"info\": \"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n                \"advanced\": True,\n            },\n            \"repeat_penalty\": {\n                \"display_name\": \"Repeat Penalty\",\n                \"field_type\": \"float\",\n                \"info\": \"Penalty for repetitions in generated text. (Default: 1.1)\",\n                \"advanced\": True,\n            },\n            \"tfs_z\": {\n                \"display_name\": \"TFS Z\",\n                \"field_type\": \"float\",\n                \"info\": \"Tail free sampling value. (Default: 1)\",\n                \"advanced\": True,\n            },\n            \"timeout\": {\n                \"display_name\": \"Timeout\",\n                \"field_type\": \"int\",\n                \"info\": \"Timeout for the request stream.\",\n                \"advanced\": True,\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"field_type\": \"int\",\n                \"info\": \"Limits token selection to top K. (Default: 40)\",\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"field_type\": \"float\",\n                \"info\": \"Works together with top-k. (Default: 0.9)\",\n                \"advanced\": True,\n            },\n            \"verbose\": {\n                \"display_name\": \"Verbose\",\n                \"field_type\": \"bool\",\n                \"info\": \"Whether to print out response text.\",\n            },\n            \"tags\": {\n                \"display_name\": \"Tags\",\n                \"field_type\": \"list\",\n                \"info\": \"Tags to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"stop\": {\n                \"display_name\": \"Stop Tokens\",\n                \"field_type\": \"list\",\n                \"info\": \"List of tokens to signal the model to stop generating text.\",\n                \"advanced\": True,\n            },\n            \"system\": {\n                \"display_name\": \"System\",\n                \"field_type\": \"str\",\n                \"info\": \"System to use for generating text.\",\n                \"advanced\": True,\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"field_type\": \"str\",\n                \"info\": \"Template to use for generating text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        base_url: Optional[str],\n        model: str,\n        mirostat: Optional[str],\n        mirostat_eta: Optional[float] = None,\n        mirostat_tau: Optional[float] = None,\n        ### When a callback component is added to Langflow, the comment must be uncommented.###\n        # callback_manager: Optional[CallbackManager] = None,\n        # callbacks: Optional[List[Callbacks]] = None,\n        #######################################################################################\n        repeat_last_n: Optional[int] = None,\n        verbose: Optional[bool] = None,\n        cache: Optional[bool] = None,\n        num_ctx: Optional[int] = None,\n        num_gpu: Optional[int] = None,\n        format: Optional[str] = None,\n        metadata: Optional[Dict[str, Any]] = None,\n        num_thread: Optional[int] = None,\n        repeat_penalty: Optional[float] = None,\n        stop: Optional[List[str]] = None,\n        system: Optional[str] = None,\n        tags: Optional[List[str]] = None,\n        temperature: Optional[float] = None,\n        template: Optional[str] = None,\n        tfs_z: Optional[float] = None,\n        timeout: Optional[int] = None,\n        top_k: Optional[int] = None,\n        top_p: Optional[int] = None,\n    ) -> BaseChatModel:\n        if not base_url:\n            base_url = \"http://localhost:11434\"\n\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": base_url,\n            \"cache\": cache,\n            \"model\": model,\n            \"mirostat\": mirostat_value,\n            \"format\": format,\n            \"metadata\": metadata,\n            \"tags\": tags,\n            ## When a callback component is added to Langflow, the comment must be uncommented.##\n            # \"callback_manager\": callback_manager,\n            # \"callbacks\": callbacks,\n            #####################################################################################\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": num_ctx,\n            \"num_gpu\": num_gpu,\n            \"num_thread\": num_thread,\n            \"repeat_last_n\": repeat_last_n,\n            \"repeat_penalty\": repeat_penalty,\n            \"temperature\": temperature,\n            \"stop\": stop,\n            \"system\": system,\n            \"template\": template,\n            \"tfs_z\": tfs_z,\n            \"timeout\": timeout,\n            \"top_k\": top_k,\n            \"top_p\": top_p,\n            \"verbose\": verbose,\n        }\n\n        # None Value remove\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "format": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "format",
                    "display_name": "Format",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Specify the format of the output (e.g., json).",
                    "title_case": true
                  },
                  "mirostat": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "Disabled",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "Disabled",
                      "Mirostat",
                      "Mirostat 2.0"
                    ],
                    "name": "mirostat",
                    "display_name": "Mirostat",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                    "title_case": true
                  },
                  "mirostat_eta": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "mirostat_eta",
                    "display_name": "Mirostat Eta",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "mirostat_tau": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "mirostat_tau",
                    "display_name": "Mirostat Tau",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "model": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "qwen:14b",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Refer to https://ollama.ai/library for more models.",
                    "title_case": true
                  },
                  "num_ctx": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_ctx",
                    "display_name": "Context Window Size",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Size of the context window for generating tokens. (Default: 2048)",
                    "title_case": true
                  },
                  "num_gpu": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_gpu",
                    "display_name": "Number of GPUs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                    "title_case": true
                  },
                  "num_thread": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "num_thread",
                    "display_name": "Number of Threads",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                    "title_case": true
                  },
                  "repeat_last_n": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "repeat_last_n",
                    "display_name": "Repeat Last N",
                    "advanced": true,
                    "dynamic": false,
                    "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                    "title_case": true
                  },
                  "repeat_penalty": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "repeat_penalty",
                    "display_name": "Repeat Penalty",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "system": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "system",
                    "display_name": "System",
                    "advanced": true,
                    "dynamic": false,
                    "info": "System to use for generating text.",
                    "title_case": true
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 0.8,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Controls the creativity of model responses.",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "template": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "template",
                    "display_name": "Template",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Template to use for generating text.",
                    "title_case": true
                  },
                  "tfs_z": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "tfs_z",
                    "display_name": "TFS Z",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Tail free sampling value. (Default: 1)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "timeout": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "timeout",
                    "display_name": "Timeout",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Timeout for the request stream.",
                    "title_case": true
                  },
                  "top_k": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "top_k",
                    "display_name": "Top K",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Limits token selection to top K. (Default: 40)",
                    "title_case": true
                  },
                  "top_p": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "top_p",
                    "display_name": "Top P",
                    "advanced": true,
                    "dynamic": false,
                    "info": "Works together with top-k. (Default: 0.9)",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "verbose": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "verbose",
                    "display_name": "Verbose",
                    "advanced": false,
                    "dynamic": false,
                    "info": "Whether to print out response text.",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Local LLM for chat with Ollama.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseChatModel"
                ],
                "display_name": "ChatOllama",
                "documentation": "",
                "custom_fields": {
                  "base_url": null,
                  "model": null,
                  "mirostat": null,
                  "mirostat_eta": null,
                  "mirostat_tau": null,
                  "repeat_last_n": null,
                  "verbose": null,
                  "cache": null,
                  "num_ctx": null,
                  "num_gpu": null,
                  "format": null,
                  "metadata": null,
                  "num_thread": null,
                  "repeat_penalty": null,
                  "stop": null,
                  "system": null,
                  "tags": null,
                  "temperature": null,
                  "template": null,
                  "tfs_z": null,
                  "timeout": null,
                  "top_k": null,
                  "top_p": null
                },
                "output_types": [
                  "BaseChatModel"
                ],
                "field_formatters": {},
                "beta": true,
                "official": false
              },
              "id": "BaseChatModel-h9K5s"
            },
            "id": "BaseChatModel-h9K5s",
            "position": {
              "x": 0,
              "y": 0
            },
            "type": "genericNode"
          }
        ],
        "viewport": {
          "x": 1,
          "y": 1,
          "zoom": 1
        }
      },
      "is_component": true,
      "updated_at": "2024-05-06T12:39:10.304661",
      "folder": null,
      "id": "5c0476e4-5d52-45fb-98a1-774aaceef91f",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "Untitled document (1)",
      "description": "Language Architect at Work!",
      "data": {
        "nodes": [
          {
            "id": "Data-1u8zZ",
            "type": "genericNode",
            "position": {
              "x": 557.2425511632965,
              "y": -128.0855992191139
            },
            "data": {
              "type": "Data",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "max_tokens": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 256,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_tokens",
                    "display_name": "Max Tokens",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "gpt-3.5-turbo-0125",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "gpt-4-turbo-preview",
                      "gpt-4-0125-preview",
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-3.5-turbo-0125",
                      "gpt-3.5-turbo-1106"
                    ],
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                    "title_case": true,
                    "value": "https://api.chatanywhere.com.cn"
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true,
                    "value": "sk-Ms5F2wAkilaaZYo0HpumWR7qBLkOIsXflNQeAHSrNtmUYjzk"
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "0.2",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "`OpenAI` Chat large language models API.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "display_name": "ChatOpenAI",
                "documentation": "",
                "custom_fields": {
                  "max_tokens": null,
                  "model_kwargs": null,
                  "model_name": null,
                  "openai_api_base": null,
                  "openai_api_key": null,
                  "temperature": null
                },
                "output_types": [
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "Data-1u8zZ",
              "description": "`OpenAI` Chat large language models API.",
              "display_name": "ChatOpenAI"
            },
            "selected": false,
            "width": 384,
            "height": 730,
            "dragging": false,
            "positionAbsolute": {
              "x": 557.2425511632965,
              "y": -128.0855992191139
            }
          },
          {
            "id": "LLMChain-HuvMg",
            "type": "genericNode",
            "position": {
              "x": 1041.687250969211,
              "y": 333.47231319969484
            },
            "data": {
              "type": "LLMChain",
              "node": {
                "template": {
                  "llm": {
                    "type": "BaseLanguageModel",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "llm",
                    "display_name": "LLM",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "prompt": {
                    "type": "BasePromptTemplate",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "prompt",
                    "display_name": "Prompt",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm)\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "Chain to run queries against LLMs",
                "base_classes": [
                  "Chain",
                  "Callable",
                  "LLMChain",
                  "Chain"
                ],
                "display_name": "LLMChain",
                "documentation": "",
                "custom_fields": {
                  "prompt": null,
                  "llm": null
                },
                "output_types": [
                  "Chain",
                  "Callable",
                  "LLMChain"
                ],
                "field_formatters": {},
                "beta": true
              },
              "id": "LLMChain-HuvMg",
              "description": "Chain to run queries against LLMs",
              "display_name": "LLMChain"
            },
            "selected": false,
            "width": 384,
            "height": 377,
            "positionAbsolute": {
              "x": 1041.687250969211,
              "y": 333.47231319969484
            },
            "dragging": false
          },
          {
            "id": "PromptTemplate-zJPcf",
            "type": "genericNode",
            "position": {
              "x": 98.23235541250017,
              "y": 313.0386975750979
            },
            "data": {
              "type": "PromptTemplate",
              "node": {
                "template": {
                  "output_parser": {
                    "type": "BaseOutputParser",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "output_parser",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_types": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_types",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "input_variables": {
                    "type": "str",
                    "required": true,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "input_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": [
                      "input"
                    ]
                  },
                  "metadata": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "metadata",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "name",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "partial_variables": {
                    "type": "dict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "partial_variables",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "tags": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": false,
                    "multiline": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "tags",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "template": {
                    "type": "prompt",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "fileTypes": [],
                    "password": false,
                    "name": "template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true,
                    "value": "{input}"
                  },
                  "template_format": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": "f-string",
                    "fileTypes": [],
                    "password": false,
                    "name": "template_format",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "validate_template": {
                    "type": "bool",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": false,
                    "multiline": false,
                    "value": false,
                    "fileTypes": [],
                    "password": false,
                    "name": "validate_template",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "_type": "PromptTemplate",
                  "input": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "input",
                    "display_name": "input",
                    "advanced": false,
                    "input_types": [
                      "Document",
                      "BaseOutputParser"
                    ],
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  }
                },
                "description": "A prompt template for a language model.",
                "icon": null,
                "base_classes": [
                  "PromptTemplate",
                  "StringPromptTemplate",
                  "BasePromptTemplate"
                ],
                "name": "",
                "display_name": "PromptTemplate",
                "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
                "custom_fields": {
                  "": [
                    "input"
                  ]
                },
                "output_types": [],
                "full_path": null,
                "field_formatters": {},
                "beta": false,
                "error": null
              },
              "id": "PromptTemplate-zJPcf",
              "description": "A prompt template for a language model.",
              "display_name": "PromptTemplate"
            },
            "selected": true,
            "width": 384,
            "height": 375,
            "dragging": false,
            "positionAbsolute": {
              "x": 98.23235541250017,
              "y": 313.0386975750979
            }
          }
        ],
        "edges": [
          {
            "source": "Data-1u8zZ",
            "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œDataœ,œidœ:œData-1u8zZœ}",
            "target": "LLMChain-HuvMg",
            "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-HuvMgœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
            "data": {
              "targetHandle": {
                "fieldName": "llm",
                "id": "LLMChain-HuvMg",
                "inputTypes": null,
                "type": "BaseLanguageModel"
              },
              "sourceHandle": {
                "baseClasses": [
                  "BaseLanguageModel",
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "dataType": "Data",
                "id": "Data-1u8zZ"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-Data-1u8zZ{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œDataœ,œidœ:œData-1u8zZœ}-LLMChain-HuvMg{œfieldNameœ:œllmœ,œidœ:œLLMChain-HuvMgœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
            "selected": false
          },
          {
            "source": "PromptTemplate-zJPcf",
            "sourceHandle": "{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-zJPcfœ}",
            "target": "LLMChain-HuvMg",
            "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-HuvMgœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
            "data": {
              "targetHandle": {
                "fieldName": "prompt",
                "id": "LLMChain-HuvMg",
                "inputTypes": null,
                "type": "BasePromptTemplate"
              },
              "sourceHandle": {
                "baseClasses": [
                  "PromptTemplate",
                  "StringPromptTemplate",
                  "BasePromptTemplate"
                ],
                "dataType": "PromptTemplate",
                "id": "PromptTemplate-zJPcf"
              }
            },
            "style": {
              "stroke": "#555"
            },
            "className": "stroke-gray-900  stroke-connection",
            "animated": false,
            "id": "reactflow__edge-PromptTemplate-zJPcf{œbaseClassesœ:[œPromptTemplateœ,œStringPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-zJPcfœ}-LLMChain-HuvMg{œfieldNameœ:œpromptœ,œidœ:œLLMChain-HuvMgœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
          }
        ],
        "viewport": {
          "x": 104.50070411563524,
          "y": -332.6766174164933,
          "zoom": 1.5157165493342108
        }
      },
      "is_component": false,
      "updated_at": "2024-05-08T03:58:03.730906",
      "folder": null,
      "id": "1265f609-8bc6-4cef-9f51-ebaaf7709815",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    },
    {
      "name": "ChatOpenAI",
      "description": "`OpenAI` Chat large language models API.",
      "data": {
        "edges": [],
        "nodes": [
          {
            "data": {
              "type": "Data",
              "node": {
                "template": {
                  "code": {
                    "type": "code",
                    "required": true,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": true,
                    "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n\n",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "code",
                    "advanced": false,
                    "dynamic": true,
                    "info": "",
                    "title_case": true
                  },
                  "max_tokens": {
                    "type": "int",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": 256,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "max_tokens",
                    "display_name": "Max Tokens",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_kwargs": {
                    "type": "NestedDict",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": {},
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "model_kwargs",
                    "display_name": "Model Kwargs",
                    "advanced": true,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "model_name": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": true,
                    "show": true,
                    "multiline": false,
                    "value": "gpt-3.5-turbo-0125",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "options": [
                      "gpt-4-turbo-preview",
                      "gpt-4-0125-preview",
                      "gpt-4-1106-preview",
                      "gpt-4-vision-preview",
                      "gpt-3.5-turbo-0125",
                      "gpt-3.5-turbo-1106"
                    ],
                    "name": "model_name",
                    "display_name": "Model Name",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true
                  },
                  "openai_api_base": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "openai_api_base",
                    "display_name": "OpenAI API Base",
                    "advanced": false,
                    "dynamic": false,
                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                    "title_case": true,
                    "value": "https://api.chatanywhere.com.cn"
                  },
                  "openai_api_key": {
                    "type": "str",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "fileTypes": [],
                    "file_path": "",
                    "password": true,
                    "name": "openai_api_key",
                    "display_name": "OpenAI API Key",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "title_case": true,
                    "value": "sk-Ms5F2wAkilaaZYo0HpumWR7qBLkOIsXflNQeAHSrNtmUYjzk"
                  },
                  "temperature": {
                    "type": "float",
                    "required": false,
                    "placeholder": "",
                    "list": false,
                    "show": true,
                    "multiline": false,
                    "value": "0.2",
                    "fileTypes": [],
                    "file_path": "",
                    "password": false,
                    "name": "temperature",
                    "display_name": "Temperature",
                    "advanced": false,
                    "dynamic": false,
                    "info": "",
                    "rangeSpec": {
                      "min": -1,
                      "max": 1,
                      "step": 0.1
                    },
                    "title_case": true
                  },
                  "_type": "CustomComponent"
                },
                "description": "`OpenAI` Chat large language models API.",
                "base_classes": [
                  "BaseLanguageModel",
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "display_name": "ChatOpenAI",
                "documentation": "",
                "custom_fields": {
                  "max_tokens": null,
                  "model_kwargs": null,
                  "model_name": null,
                  "openai_api_base": null,
                  "openai_api_key": null,
                  "temperature": null
                },
                "output_types": [
                  "BaseLanguageModel",
                  "BaseLLM"
                ],
                "field_formatters": {},
                "beta": true,
                "official": false
              },
              "id": "Data-qNjc5",
              "description": "`OpenAI` Chat large language models API.",
              "display_name": "ChatOpenAI"
            },
            "id": "Data-qNjc5",
            "position": {
              "x": 0,
              "y": 0
            },
            "type": "genericNode"
          }
        ],
        "viewport": {
          "x": 1,
          "y": 1,
          "zoom": 1
        }
      },
      "is_component": true,
      "updated_at": "2024-05-07T02:41:46.677004",
      "folder": null,
      "id": "e63afb29-2ac9-4551-8e1b-7009cd1e6047",
      "user_id": "d60b7bb5-4a7f-4666-ba0a-4715af998584"
    }
  ]
}